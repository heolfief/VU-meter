
Code_VU_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000bb0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800106  00800106  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e16  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  00002c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7d  00000000  00000000  000037ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00004568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a9  00000000  00000000  0000530c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000068b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_18>
  4c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_19>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_21>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__fp_pscA+0x8>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e0 eb       	ldi	r30, 0xB0	; 176
  d6:	fb e0       	ldi	r31, 0x0B	; 11
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a6 30       	cpi	r26, 0x06	; 6
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a6 e0       	ldi	r26, 0x06	; 6
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a6 3a       	cpi	r26, 0xA6	; 166
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 80 00 	call	0x100	; 0x100 <main>
  f8:	0c 94 d6 05 	jmp	0xbac	; 0xbac <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <main>:
#include "headers/Config.h"
#include "headers/wdt.h"

int main(void)
{
	wdt_init();
 100:	0e 94 c7 02 	call	0x58e	; 0x58e <wdt_init>
	tmr0_init();
 104:	0e 94 ba 00 	call	0x174	; 0x174 <tmr0_init>
	tmr2_init();
 108:	0e 94 c9 00 	call	0x192	; 0x192 <tmr2_init>
	adc_init();
 10c:	0e 94 a0 00 	call	0x140	; 0x140 <adc_init>
	io_init();
 110:	0e 94 da 00 	call	0x1b4	; 0x1b4 <io_init>
	}
	
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) __attribute__((always_inline));
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) // UCSRC_reg can be used to set other than 8n1 transmission
	{
		UCSR0C_REGISTER = UCSRC_reg;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
 120:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
 124:	88 e9       	ldi	r24, 0x98	; 152
 126:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE);
	uart_init(BAUD_CALC(115200));
	
	sei();		// Enable interrupts
 12a:	78 94       	sei
    
	while(1)
    {
		watchdogReset();
 12c:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x32>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x38>
 138:	00 00       	nop
		
		_delay_ms(10);
		test();
 13a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <test>
 13e:	f6 cf       	rjmp	.-20     	; 0x12c <main+0x2c>

00000140 <adc_init>:
float peak_value = 0;


void adc_init()
{
	ADMUX = ADC_CHANNEL & 0b111;						// Select ADC channel
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	10 82       	st	Z, r1
	ADMUX &= ~((1<<REFS1) | (1<<REFS0));				// VCC used as Voltage Reference
 146:	80 81       	ld	r24, Z
 148:	8f 73       	andi	r24, 0x3F	; 63
 14a:	80 83       	st	Z, r24
	ADCSRB &= ~(1<<ADTS2);								// ...
 14c:	eb e7       	ldi	r30, 0x7B	; 123
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1) | (1<<ADTS0);					// ... Trigger ADC on Timer0 compare match A
 156:	80 81       	ld	r24, Z
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// ... ADC clock prescaler = 128
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	87 60       	ori	r24, 0x07	; 7
 164:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE) | (1<<ADEN) | (1<<ADATE);		// Enable ADC and enable interrupt and enable auto-trigger
 166:	80 81       	ld	r24, Z
 168:	88 6a       	ori	r24, 0xA8	; 168
 16a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								// Start ADC conversion
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <tmr0_init>:
}

void tmr0_init()
{
	TCNT0=0;											// Reset timer
 174:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01);								// CTC mode (clear timer on compare match)
 176:	84 b5       	in	r24, 0x24	; 36
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1<<COM0A1) | (1<<COM0A0));				// Normal port operation, OC0A disconnected.
 17c:	84 b5       	in	r24, 0x24	; 36
 17e:	8f 73       	andi	r24, 0x3F	; 63
 180:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<CS02);								// ... 
 182:	85 b5       	in	r24, 0x25	; 37
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	85 bd       	out	0x25, r24	; 37
	TCCR0B = (1<<CS01)|(1<<CS00);						// ... Timer0 clock prescaler = 64
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;										// compare match every 250 * 1 / (16 000 000 / 64) = 1 ms  -->  1kHz
 18c:	8a ef       	ldi	r24, 0xFA	; 250
 18e:	87 bd       	out	0x27, r24	; 39
 190:	08 95       	ret

00000192 <tmr2_init>:
}

void tmr2_init()
{
	TCNT2=0;											// Reset timer
 192:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A |= (1<<WGM21);								// CTC mode (clear timer on compare match)
 196:	e0 eb       	ldi	r30, 0xB0	; 176
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 83       	st	Z, r24
	TCCR2A &= ~((1<<COM2A1) | (1<<COM2A0));				// Normal port operation, OC2A disconnected.
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 73       	andi	r24, 0x3F	; 63
 1a4:	80 83       	st	Z, r24
	TCCR2B = (1<<CS22)| (1<<CS21) | (1<<CS20);			// Timer2 clock prescaler = 1024
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 250;										// compare match every 260 * 1 / (16 000 000 / 1024) = 16.64 ms  -->  60Hz
 1ac:	8a ef       	ldi	r24, 0xFA	; 250
 1ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1b2:	08 95       	ret

000001b4 <io_init>:
}

void io_init()
{
 1b4:	08 95       	ret

000001b6 <test>:
	//PORTD = 0xFF;
}

void test()
{
	uart_puts("$");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart0_putstr>
	uart_putint(20*log10(adc_avg+1)*NUMBER_OF_LED/60.2);
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e8       	ldi	r20, 0x80	; 128
 1c4:	5f e3       	ldi	r21, 0x3F	; 63
 1c6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <adc_avg>
 1ca:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <adc_avg+0x1>
 1ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_avg+0x2>
 1d2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_avg+0x3>
 1d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 1da:	0e 94 a7 04 	call	0x94e	; 0x94e <log10>
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 ea       	ldi	r20, 0xA0	; 160
 1e4:	51 e4       	ldi	r21, 0x41	; 65
 1e6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 ea       	ldi	r20, 0xA0	; 160
 1f0:	52 e4       	ldi	r21, 0x42	; 66
 1f2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 1f6:	2d ec       	ldi	r18, 0xCD	; 205
 1f8:	3c ec       	ldi	r19, 0xCC	; 204
 1fa:	40 e7       	ldi	r20, 0x70	; 112
 1fc:	52 e4       	ldi	r21, 0x42	; 66
 1fe:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 202:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 206:	cb 01       	movw	r24, r22
 208:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uart0_putint>
	uart_puts(" ");
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart0_putstr>
	uart_putint(peak_value);
 214:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 218:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 21c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 220:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 224:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 228:	cb 01       	movw	r24, r22
 22a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uart0_putint>
	uart_puts(";");
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart0_putstr>
 236:	08 95       	ret

00000238 <__vector_21>:
}

ISR(ADC_vect)											// Interrupt on ADC conversion complete
{	
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	4f 92       	push	r4
 244:	5f 92       	push	r5
 246:	6f 92       	push	r6
 248:	7f 92       	push	r7
 24a:	8f 92       	push	r8
 24c:	9f 92       	push	r9
 24e:	af 92       	push	r10
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	TIFR0=(1<<OCF0A);									// Disable tmr0 comp match a interrupt
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	85 bb       	out	0x15, r24	; 21
		
	adc_avg += (((float)ADC - adc_avg) / AVERAGEWIDTH);	// Pseudo running average
 27e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 282:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 286:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <adc_avg>
 28a:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <adc_avg+0x1>
 28e:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <adc_avg+0x2>
 292:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <adc_avg+0x3>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__subsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e8       	ldi	r20, 0x80	; 128
 2ac:	5e e3       	ldi	r21, 0x3E	; 62
 2ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 2b2:	a7 01       	movw	r20, r14
 2b4:	96 01       	movw	r18, r12
 2b6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 2ba:	4b 01       	movw	r8, r22
 2bc:	5c 01       	movw	r10, r24
 2be:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adc_avg>
 2c2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <adc_avg+0x1>
 2c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_avg+0x2>
 2ca:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adc_avg+0x3>
	
	float vu_value = 20*log10(adc_avg+1)*NUMBER_OF_LED/60.2; // 60.2=20*Log10(1024)
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e8       	ldi	r20, 0x80	; 128
 2d4:	5f e3       	ldi	r21, 0x3F	; 63
 2d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 2da:	0e 94 a7 04 	call	0x94e	; 0x94e <log10>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 ea       	ldi	r20, 0xA0	; 160
 2e4:	51 e4       	ldi	r21, 0x41	; 65
 2e6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 ea       	ldi	r20, 0xA0	; 160
 2f0:	52 e4       	ldi	r21, 0x42	; 66
 2f2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 2f6:	2d ec       	ldi	r18, 0xCD	; 205
 2f8:	3c ec       	ldi	r19, 0xCC	; 204
 2fa:	40 e7       	ldi	r20, 0x70	; 112
 2fc:	52 e4       	ldi	r21, 0x42	; 66
 2fe:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
	
	if ((peak_ht_cnt*9.948) > PEAK_HOLD_TIME)			// If peak hold time is reached
 306:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <peak_ht_cnt>
 30a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <peak_ht_cnt+0x1>
 30e:	07 2e       	mov	r0, r23
 310:	00 0c       	add	r0, r0
 312:	88 0b       	sbc	r24, r24
 314:	99 0b       	sbc	r25, r25
 316:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__floatsisf>
 31a:	22 e0       	ldi	r18, 0x02	; 2
 31c:	3b e2       	ldi	r19, 0x2B	; 43
 31e:	4f e1       	ldi	r20, 0x1F	; 31
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	46 e1       	ldi	r20, 0x16	; 22
 32c:	54 e4       	ldi	r21, 0x44	; 68
 32e:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
 332:	18 16       	cp	r1, r24
 334:	5c f5       	brge	.+86     	; 0x38c <__vector_21+0x154>
	{
		if (peak_value < PEAK_FALL_RATE) peak_value = 0;// decrease peak value only if it will stay higher than 0
 336:	40 90 06 01 	lds	r4, 0x0106	; 0x800106 <__data_end>
 33a:	50 90 07 01 	lds	r5, 0x0107	; 0x800107 <__data_end+0x1>
 33e:	60 90 08 01 	lds	r6, 0x0108	; 0x800108 <__data_end+0x2>
 342:	70 90 09 01 	lds	r7, 0x0109	; 0x800109 <__data_end+0x3>
 346:	2d ec       	ldi	r18, 0xCD	; 205
 348:	3c ec       	ldi	r19, 0xCC	; 204
 34a:	4c e4       	ldi	r20, 0x4C	; 76
 34c:	5e e3       	ldi	r21, 0x3E	; 62
 34e:	c3 01       	movw	r24, r6
 350:	b2 01       	movw	r22, r4
 352:	0e 94 43 03 	call	0x686	; 0x686 <__cmpsf2>
 356:	88 23       	and	r24, r24
 358:	4c f4       	brge	.+18     	; 0x36c <__vector_21+0x134>
 35a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 35e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 362:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end+0x2>
 366:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x3>
 36a:	10 c0       	rjmp	.+32     	; 0x38c <__vector_21+0x154>
		else peak_value -= PEAK_FALL_RATE;
 36c:	2d ec       	ldi	r18, 0xCD	; 205
 36e:	3c ec       	ldi	r19, 0xCC	; 204
 370:	4c e4       	ldi	r20, 0x4C	; 76
 372:	5e e3       	ldi	r21, 0x3E	; 62
 374:	c3 01       	movw	r24, r6
 376:	b2 01       	movw	r22, r4
 378:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__subsf3>
 37c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 380:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 384:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 388:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
	}
	if (vu_value > peak_value)							// If a peak higher than the previous is detected
 38c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 390:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 394:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end+0x2>
 398:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__data_end+0x3>
 39c:	c7 01       	movw	r24, r14
 39e:	b6 01       	movw	r22, r12
 3a0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
 3a4:	18 16       	cp	r1, r24
 3a6:	64 f4       	brge	.+24     	; 0x3c0 <__vector_21+0x188>
	{
		peak_value = vu_value;							// Store the peak
 3a8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <__data_end>
 3ac:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <__data_end+0x1>
 3b0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <__data_end+0x2>
 3b4:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <__data_end+0x3>
		peak_ht_cnt = 0;								// start the peak hold counter
 3b8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <peak_ht_cnt+0x1>
 3bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <peak_ht_cnt>
	}
	peak_ht_cnt ++;										// Increase the peak hold counter
 3c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <peak_ht_cnt>
 3c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <peak_ht_cnt+0x1>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <peak_ht_cnt+0x1>
 3ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <peak_ht_cnt>
	
	for (uint8_t i=0; i<vu_value; ++i) led_array[i]=1;	// Fill bottom part of led_array with 1
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	a9 01       	movw	r20, r18
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
 3e0:	18 16       	cp	r1, r24
 3e2:	cc f4       	brge	.+50     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
 3e8:	10 e0       	ldi	r17, 0x00	; 0
 3ea:	01 e0       	ldi	r16, 0x01	; 1
 3ec:	ce 5e       	subi	r28, 0xEE	; 238
 3ee:	de 4f       	sbci	r29, 0xFE	; 254
 3f0:	08 83       	st	Y, r16
 3f2:	1f 5f       	subi	r17, 0xFF	; 255
 3f4:	c1 2f       	mov	r28, r17
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	be 01       	movw	r22, r28
 3fa:	0d 2e       	mov	r0, r29
 3fc:	00 0c       	add	r0, r0
 3fe:	88 0b       	sbc	r24, r24
 400:	99 0b       	sbc	r25, r25
 402:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__floatsisf>
 406:	9b 01       	movw	r18, r22
 408:	ac 01       	movw	r20, r24
 40a:	c7 01       	movw	r24, r14
 40c:	b6 01       	movw	r22, r12
 40e:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
 412:	18 16       	cp	r1, r24
 414:	5c f3       	brlt	.-42     	; 0x3ec <__vector_21+0x1b4>
	for (uint8_t i=adc_avg; i<sizeof(led_array); ++i) led_array[i]=0;	// Fill top part of led_array with 0
 416:	c5 01       	movw	r24, r10
 418:	b4 01       	movw	r22, r8
 41a:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 41e:	60 35       	cpi	r22, 0x50	; 80
 420:	40 f4       	brcc	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 422:	e6 2f       	mov	r30, r22
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	ee 5e       	subi	r30, 0xEE	; 238
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	10 82       	st	Z, r1
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	60 35       	cpi	r22, 0x50	; 80
 430:	c1 f7       	brne	.-16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	
	led_array[(int)peak_value]=1;						// Light up peak led
 432:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 436:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 43a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 43e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 442:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 446:	fb 01       	movw	r30, r22
 448:	ee 5e       	subi	r30, 0xEE	; 238
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	bf 90       	pop	r11
 47a:	af 90       	pop	r10
 47c:	9f 90       	pop	r9
 47e:	8f 90       	pop	r8
 480:	7f 90       	pop	r7
 482:	6f 90       	pop	r6
 484:	5f 90       	pop	r5
 486:	4f 90       	pop	r4
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <uart0_putc>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
 492:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <tx0_Head>
 496:	9f 5f       	subi	r25, 0xFF	; 255
 498:	9f 71       	andi	r25, 0x1F	; 31
 49a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <tx0_Tail>
 49e:	92 17       	cp	r25, r18
 4a0:	e1 f3       	breq	.-8      	; 0x49a <uart0_putc+0x8>
 4a2:	e9 2f       	mov	r30, r25
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ea 57       	subi	r30, 0x7A	; 122
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	80 83       	st	Z, r24
 4ac:	2f b7       	in	r18, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <tx0_Head>
 4b4:	e1 ec       	ldi	r30, 0xC1	; 193
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	80 83       	st	Z, r24
 4be:	2f bf       	out	0x3f, r18	; 63
 4c0:	08 95       	ret

000004c2 <uart0_putstr>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	21 96       	adiw	r28, 0x01	; 1
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	88 23       	and	r24, r24
 4d0:	29 f0       	breq	.+10     	; 0x4dc <uart0_putstr+0x1a>
 4d2:	0e 94 49 02 	call	0x492	; 0x492 <uart0_putc>
 4d6:	89 91       	ld	r24, Y+
 4d8:	81 11       	cpse	r24, r1
 4da:	fb cf       	rjmp	.-10     	; 0x4d2 <uart0_putstr+0x10>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <uart0_putint>:
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	27 97       	sbiw	r28, 0x07	; 7
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	4a e0       	ldi	r20, 0x0A	; 10
 4f8:	be 01       	movw	r22, r28
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	0e 94 a1 05 	call	0xb42	; 0xb42 <__itoa_ncheck>
 502:	ce 01       	movw	r24, r28
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart0_putstr>
 50a:	27 96       	adiw	r28, 0x07	; 7
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 51c:	0f 93       	push	r16
 51e:	0f b7       	in	r16, 0x3f	; 63
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
 524:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <tx0_Tail>
 528:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <tx0_Head>
 52c:	e3 95       	inc	r30
 52e:	ef 71       	andi	r30, 0x1F	; 31
 530:	ef 13       	cpse	r30, r31
 532:	05 c0       	rjmp	.+10     	; 0x53e <USART0_TX_CONTINUE>
 534:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 538:	ff 7d       	andi	r31, 0xDF	; 223
 53a:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

0000053e <USART0_TX_CONTINUE>:
 53e:	e0 93 82 01 	sts	0x0182, r30	; 0x800182 <tx0_Tail>
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ea 57       	subi	r30, 0x7A	; 122
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	e0 81       	ld	r30, Z
 54a:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

0000054e <USART0_TX_EXIT>:
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	0f bf       	out	0x3f, r16	; 63
 554:	0f 91       	pop	r16
 556:	18 95       	reti

00000558 <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 558:	0f 93       	push	r16
 55a:	0f b7       	in	r16, 0x3f	; 63
 55c:	9f 93       	push	r25
 55e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31
 566:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <rx0_Head>
 56a:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <rx0_Tail>
 56e:	e3 95       	inc	r30
 570:	ef 71       	andi	r30, 0x1F	; 31
 572:	fe 17       	cp	r31, r30
 574:	31 f0       	breq	.+12     	; 0x582 <USART0_RX_EXIT>
 576:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <rx0_Head>
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	ee 59       	subi	r30, 0x9E	; 158
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	90 83       	st	Z, r25

00000582 <USART0_RX_EXIT>:
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	9f 91       	pop	r25
 588:	0f bf       	out	0x3f, r16	; 63
 58a:	0f 91       	pop	r16
 58c:	18 95       	reti

0000058e <wdt_init>:
#include "headers/wdt.h"


void wdt_init()
{
	WDTCSR |= (1<<WDE);									// ...
 58e:	e0 e6       	ldi	r30, 0x60	; 96
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	88 60       	ori	r24, 0x08	; 8
 596:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDIE);								// ... Watchdog on System Reset Mode
 598:	80 81       	ld	r24, Z
 59a:	8f 7b       	andi	r24, 0xBF	; 191
 59c:	80 83       	st	Z, r24
	WDTCSR |= (1<<WDP2) |(1<<WDP0);						// ...
 59e:	80 81       	ld	r24, Z
 5a0:	85 60       	ori	r24, 0x05	; 5
 5a2:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDP1);								// ... Watchdog time-out at 0.5s
 5a4:	80 81       	ld	r24, Z
 5a6:	8d 7f       	andi	r24, 0xFD	; 253
 5a8:	80 83       	st	Z, r24
 5aa:	08 95       	ret

000005ac <__subsf3>:
 5ac:	50 58       	subi	r21, 0x80	; 128

000005ae <__addsf3>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	aa 27       	eor	r26, r26
 5b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3x>
 5b6:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 5ba:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 5be:	38 f0       	brcs	.+14     	; 0x5ce <__addsf3+0x20>
 5c0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__addsf3+0x20>
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <__addsf3+0x28>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	19 f4       	brne	.+6      	; 0x5d2 <__addsf3+0x24>
 5cc:	26 f4       	brtc	.+8      	; 0x5d6 <__addsf3+0x28>
 5ce:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 5d2:	0e f4       	brtc	.+2      	; 0x5d6 <__addsf3+0x28>
 5d4:	e0 95       	com	r30
 5d6:	e7 fb       	bst	r30, 7
 5d8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>

000005dc <__addsf3x>:
 5dc:	e9 2f       	mov	r30, r25
 5de:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
 5e2:	58 f3       	brcs	.-42     	; 0x5ba <__addsf3+0xc>
 5e4:	ba 17       	cp	r27, r26
 5e6:	62 07       	cpc	r22, r18
 5e8:	73 07       	cpc	r23, r19
 5ea:	84 07       	cpc	r24, r20
 5ec:	95 07       	cpc	r25, r21
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__addsf3x+0x1c>
 5f0:	79 f4       	brne	.+30     	; 0x610 <__addsf3x+0x34>
 5f2:	a6 f5       	brtc	.+104    	; 0x65c <__addsf3x+0x80>
 5f4:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_zero>
 5f8:	0e f4       	brtc	.+2      	; 0x5fc <__addsf3x+0x20>
 5fa:	e0 95       	com	r30
 5fc:	0b 2e       	mov	r0, r27
 5fe:	ba 2f       	mov	r27, r26
 600:	a0 2d       	mov	r26, r0
 602:	0b 01       	movw	r0, r22
 604:	b9 01       	movw	r22, r18
 606:	90 01       	movw	r18, r0
 608:	0c 01       	movw	r0, r24
 60a:	ca 01       	movw	r24, r20
 60c:	a0 01       	movw	r20, r0
 60e:	11 24       	eor	r1, r1
 610:	ff 27       	eor	r31, r31
 612:	59 1b       	sub	r21, r25
 614:	99 f0       	breq	.+38     	; 0x63c <__addsf3x+0x60>
 616:	59 3f       	cpi	r21, 0xF9	; 249
 618:	50 f4       	brcc	.+20     	; 0x62e <__addsf3x+0x52>
 61a:	50 3e       	cpi	r21, 0xE0	; 224
 61c:	68 f1       	brcs	.+90     	; 0x678 <__addsf3x+0x9c>
 61e:	1a 16       	cp	r1, r26
 620:	f0 40       	sbci	r31, 0x00	; 0
 622:	a2 2f       	mov	r26, r18
 624:	23 2f       	mov	r18, r19
 626:	34 2f       	mov	r19, r20
 628:	44 27       	eor	r20, r20
 62a:	58 5f       	subi	r21, 0xF8	; 248
 62c:	f3 cf       	rjmp	.-26     	; 0x614 <__addsf3x+0x38>
 62e:	46 95       	lsr	r20
 630:	37 95       	ror	r19
 632:	27 95       	ror	r18
 634:	a7 95       	ror	r26
 636:	f0 40       	sbci	r31, 0x00	; 0
 638:	53 95       	inc	r21
 63a:	c9 f7       	brne	.-14     	; 0x62e <__addsf3x+0x52>
 63c:	7e f4       	brtc	.+30     	; 0x65c <__addsf3x+0x80>
 63e:	1f 16       	cp	r1, r31
 640:	ba 0b       	sbc	r27, r26
 642:	62 0b       	sbc	r22, r18
 644:	73 0b       	sbc	r23, r19
 646:	84 0b       	sbc	r24, r20
 648:	ba f0       	brmi	.+46     	; 0x678 <__addsf3x+0x9c>
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	a1 f0       	breq	.+40     	; 0x676 <__addsf3x+0x9a>
 64e:	ff 0f       	add	r31, r31
 650:	bb 1f       	adc	r27, r27
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	c2 f7       	brpl	.-16     	; 0x64a <__addsf3x+0x6e>
 65a:	0e c0       	rjmp	.+28     	; 0x678 <__addsf3x+0x9c>
 65c:	ba 0f       	add	r27, r26
 65e:	62 1f       	adc	r22, r18
 660:	73 1f       	adc	r23, r19
 662:	84 1f       	adc	r24, r20
 664:	48 f4       	brcc	.+18     	; 0x678 <__addsf3x+0x9c>
 666:	87 95       	ror	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b7 95       	ror	r27
 66e:	f7 95       	ror	r31
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	08 f0       	brcs	.+2      	; 0x676 <__addsf3x+0x9a>
 674:	b0 cf       	rjmp	.-160    	; 0x5d6 <__addsf3+0x28>
 676:	93 95       	inc	r25
 678:	88 0f       	add	r24, r24
 67a:	08 f0       	brcs	.+2      	; 0x67e <__addsf3x+0xa2>
 67c:	99 27       	eor	r25, r25
 67e:	ee 0f       	add	r30, r30
 680:	97 95       	ror	r25
 682:	87 95       	ror	r24
 684:	08 95       	ret

00000686 <__cmpsf2>:
 686:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_cmp>
 68a:	08 f4       	brcc	.+2      	; 0x68e <__cmpsf2+0x8>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <__divsf3>:
 690:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__divsf3x>
 694:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 698:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 69c:	58 f0       	brcs	.+22     	; 0x6b4 <__divsf3+0x24>
 69e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <__divsf3+0x24>
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <__divsf3+0x20>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	29 f0       	breq	.+10     	; 0x6b4 <__divsf3+0x24>
 6aa:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 6ae:	51 11       	cpse	r21, r1
 6b0:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 6b4:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>

000006b8 <__divsf3x>:
 6b8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
 6bc:	68 f3       	brcs	.-38     	; 0x698 <__divsf3+0x8>

000006be <__divsf3_pse>:
 6be:	99 23       	and	r25, r25
 6c0:	b1 f3       	breq	.-20     	; 0x6ae <__divsf3+0x1e>
 6c2:	55 23       	and	r21, r21
 6c4:	91 f3       	breq	.-28     	; 0x6aa <__divsf3+0x1a>
 6c6:	95 1b       	sub	r25, r21
 6c8:	55 0b       	sbc	r21, r21
 6ca:	bb 27       	eor	r27, r27
 6cc:	aa 27       	eor	r26, r26
 6ce:	62 17       	cp	r22, r18
 6d0:	73 07       	cpc	r23, r19
 6d2:	84 07       	cpc	r24, r20
 6d4:	38 f0       	brcs	.+14     	; 0x6e4 <__divsf3_pse+0x26>
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	44 1f       	adc	r20, r20
 6e0:	aa 1f       	adc	r26, r26
 6e2:	a9 f3       	breq	.-22     	; 0x6ce <__divsf3_pse+0x10>
 6e4:	35 d0       	rcall	.+106    	; 0x750 <__divsf3_pse+0x92>
 6e6:	0e 2e       	mov	r0, r30
 6e8:	3a f0       	brmi	.+14     	; 0x6f8 <__divsf3_pse+0x3a>
 6ea:	e0 e8       	ldi	r30, 0x80	; 128
 6ec:	32 d0       	rcall	.+100    	; 0x752 <__divsf3_pse+0x94>
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	e6 95       	lsr	r30
 6f4:	00 1c       	adc	r0, r0
 6f6:	ca f7       	brpl	.-14     	; 0x6ea <__divsf3_pse+0x2c>
 6f8:	2b d0       	rcall	.+86     	; 0x750 <__divsf3_pse+0x92>
 6fa:	fe 2f       	mov	r31, r30
 6fc:	29 d0       	rcall	.+82     	; 0x750 <__divsf3_pse+0x92>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	bb 1f       	adc	r27, r27
 706:	26 17       	cp	r18, r22
 708:	37 07       	cpc	r19, r23
 70a:	48 07       	cpc	r20, r24
 70c:	ab 07       	cpc	r26, r27
 70e:	b0 e8       	ldi	r27, 0x80	; 128
 710:	09 f0       	breq	.+2      	; 0x714 <__divsf3_pse+0x56>
 712:	bb 0b       	sbc	r27, r27
 714:	80 2d       	mov	r24, r0
 716:	bf 01       	movw	r22, r30
 718:	ff 27       	eor	r31, r31
 71a:	93 58       	subi	r25, 0x83	; 131
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	3a f0       	brmi	.+14     	; 0x72e <__divsf3_pse+0x70>
 720:	9e 3f       	cpi	r25, 0xFE	; 254
 722:	51 05       	cpc	r21, r1
 724:	78 f0       	brcs	.+30     	; 0x744 <__divsf3_pse+0x86>
 726:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 72a:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	e4 f3       	brlt	.-8      	; 0x72a <__divsf3_pse+0x6c>
 732:	98 3e       	cpi	r25, 0xE8	; 232
 734:	d4 f3       	brlt	.-12     	; 0x72a <__divsf3_pse+0x6c>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f7 95       	ror	r31
 740:	9f 5f       	subi	r25, 0xFF	; 255
 742:	c9 f7       	brne	.-14     	; 0x736 <__divsf3_pse+0x78>
 744:	88 0f       	add	r24, r24
 746:	91 1d       	adc	r25, r1
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret
 750:	e1 e0       	ldi	r30, 0x01	; 1
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	bb 1f       	adc	r27, r27
 75a:	62 17       	cp	r22, r18
 75c:	73 07       	cpc	r23, r19
 75e:	84 07       	cpc	r24, r20
 760:	ba 07       	cpc	r27, r26
 762:	20 f0       	brcs	.+8      	; 0x76c <__divsf3_pse+0xae>
 764:	62 1b       	sub	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	ba 0b       	sbc	r27, r26
 76c:	ee 1f       	adc	r30, r30
 76e:	88 f7       	brcc	.-30     	; 0x752 <__divsf3_pse+0x94>
 770:	e0 95       	com	r30
 772:	08 95       	ret

00000774 <__fixsfsi>:
 774:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 778:	68 94       	set
 77a:	b1 11       	cpse	r27, r1
 77c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 780:	08 95       	ret

00000782 <__fixunssfsi>:
 782:	0e 94 81 04 	call	0x902	; 0x902 <__fp_splitA>
 786:	88 f0       	brcs	.+34     	; 0x7aa <__fixunssfsi+0x28>
 788:	9f 57       	subi	r25, 0x7F	; 127
 78a:	98 f0       	brcs	.+38     	; 0x7b2 <__fixunssfsi+0x30>
 78c:	b9 2f       	mov	r27, r25
 78e:	99 27       	eor	r25, r25
 790:	b7 51       	subi	r27, 0x17	; 23
 792:	b0 f0       	brcs	.+44     	; 0x7c0 <__fixunssfsi+0x3e>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__fixunssfsi+0x4c>
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	1a f0       	brmi	.+6      	; 0x7a6 <__fixunssfsi+0x24>
 7a0:	ba 95       	dec	r27
 7a2:	c9 f7       	brne	.-14     	; 0x796 <__fixunssfsi+0x14>
 7a4:	14 c0       	rjmp	.+40     	; 0x7ce <__fixunssfsi+0x4c>
 7a6:	b1 30       	cpi	r27, 0x01	; 1
 7a8:	91 f0       	breq	.+36     	; 0x7ce <__fixunssfsi+0x4c>
 7aa:	0e 94 9b 04 	call	0x936	; 0x936 <__fp_zero>
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_zero>
 7b6:	67 2f       	mov	r22, r23
 7b8:	78 2f       	mov	r23, r24
 7ba:	88 27       	eor	r24, r24
 7bc:	b8 5f       	subi	r27, 0xF8	; 248
 7be:	39 f0       	breq	.+14     	; 0x7ce <__fixunssfsi+0x4c>
 7c0:	b9 3f       	cpi	r27, 0xF9	; 249
 7c2:	cc f3       	brlt	.-14     	; 0x7b6 <__fixunssfsi+0x34>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b3 95       	inc	r27
 7cc:	d9 f7       	brne	.-10     	; 0x7c4 <__fixunssfsi+0x42>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__fixunssfsi+0x5c>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__floatunsisf>:
 7e0:	e8 94       	clt
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <__floatsisf+0x12>

000007e4 <__floatsisf>:
 7e4:	97 fb       	bst	r25, 7
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__floatsisf+0x12>
 7e8:	90 95       	com	r25
 7ea:	80 95       	com	r24
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	99 23       	and	r25, r25
 7f8:	a9 f0       	breq	.+42     	; 0x824 <__floatsisf+0x40>
 7fa:	f9 2f       	mov	r31, r25
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	bb 27       	eor	r27, r27
 800:	93 95       	inc	r25
 802:	f6 95       	lsr	r31
 804:	87 95       	ror	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f1 11       	cpse	r31, r1
 80e:	f8 cf       	rjmp	.-16     	; 0x800 <__floatsisf+0x1c>
 810:	fa f4       	brpl	.+62     	; 0x850 <__floatsisf+0x6c>
 812:	bb 0f       	add	r27, r27
 814:	11 f4       	brne	.+4      	; 0x81a <__floatsisf+0x36>
 816:	60 ff       	sbrs	r22, 0
 818:	1b c0       	rjmp	.+54     	; 0x850 <__floatsisf+0x6c>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	16 c0       	rjmp	.+44     	; 0x850 <__floatsisf+0x6c>
 824:	88 23       	and	r24, r24
 826:	11 f0       	breq	.+4      	; 0x82c <__floatsisf+0x48>
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	11 c0       	rjmp	.+34     	; 0x84e <__floatsisf+0x6a>
 82c:	77 23       	and	r23, r23
 82e:	21 f0       	breq	.+8      	; 0x838 <__floatsisf+0x54>
 830:	9e e8       	ldi	r25, 0x8E	; 142
 832:	87 2f       	mov	r24, r23
 834:	76 2f       	mov	r23, r22
 836:	05 c0       	rjmp	.+10     	; 0x842 <__floatsisf+0x5e>
 838:	66 23       	and	r22, r22
 83a:	71 f0       	breq	.+28     	; 0x858 <__floatsisf+0x74>
 83c:	96 e8       	ldi	r25, 0x86	; 134
 83e:	86 2f       	mov	r24, r22
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	2a f0       	brmi	.+10     	; 0x850 <__floatsisf+0x6c>
 846:	9a 95       	dec	r25
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	da f7       	brpl	.-10     	; 0x846 <__floatsisf+0x62>
 850:	88 0f       	add	r24, r24
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__fp_cmp>:
 85a:	99 0f       	add	r25, r25
 85c:	00 08       	sbc	r0, r0
 85e:	55 0f       	add	r21, r21
 860:	aa 0b       	sbc	r26, r26
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	fe ef       	ldi	r31, 0xFE	; 254
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	e8 07       	cpc	r30, r24
 86c:	f9 07       	cpc	r31, r25
 86e:	c0 f0       	brcs	.+48     	; 0x8a0 <__fp_cmp+0x46>
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	e4 07       	cpc	r30, r20
 876:	f5 07       	cpc	r31, r21
 878:	98 f0       	brcs	.+38     	; 0x8a0 <__fp_cmp+0x46>
 87a:	62 1b       	sub	r22, r18
 87c:	73 0b       	sbc	r23, r19
 87e:	84 0b       	sbc	r24, r20
 880:	95 0b       	sbc	r25, r21
 882:	39 f4       	brne	.+14     	; 0x892 <__fp_cmp+0x38>
 884:	0a 26       	eor	r0, r26
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_cmp+0x46>
 888:	23 2b       	or	r18, r19
 88a:	24 2b       	or	r18, r20
 88c:	25 2b       	or	r18, r21
 88e:	21 f4       	brne	.+8      	; 0x898 <__fp_cmp+0x3e>
 890:	08 95       	ret
 892:	0a 26       	eor	r0, r26
 894:	09 f4       	brne	.+2      	; 0x898 <__fp_cmp+0x3e>
 896:	a1 40       	sbci	r26, 0x01	; 1
 898:	a6 95       	lsr	r26
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	81 1d       	adc	r24, r1
 89e:	81 1d       	adc	r24, r1
 8a0:	08 95       	ret

000008a2 <__fp_inf>:
 8a2:	97 f9       	bld	r25, 7
 8a4:	9f 67       	ori	r25, 0x7F	; 127
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	08 95       	ret

000008ae <__fp_nan>:
 8ae:	9f ef       	ldi	r25, 0xFF	; 255
 8b0:	80 ec       	ldi	r24, 0xC0	; 192
 8b2:	08 95       	ret

000008b4 <__fp_pscA>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	16 16       	cp	r1, r22
 8ba:	17 06       	cpc	r1, r23
 8bc:	18 06       	cpc	r1, r24
 8be:	09 06       	cpc	r0, r25
 8c0:	08 95       	ret

000008c2 <__fp_pscB>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	05 06       	cpc	r0, r21
 8ce:	08 95       	ret

000008d0 <__fp_round>:
 8d0:	09 2e       	mov	r0, r25
 8d2:	03 94       	inc	r0
 8d4:	00 0c       	add	r0, r0
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__fp_round+0xc>
 8d8:	88 23       	and	r24, r24
 8da:	52 f0       	brmi	.+20     	; 0x8f0 <__fp_round+0x20>
 8dc:	bb 0f       	add	r27, r27
 8de:	40 f4       	brcc	.+16     	; 0x8f0 <__fp_round+0x20>
 8e0:	bf 2b       	or	r27, r31
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0x18>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__fp_round+0x20>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__fp_split3>:
 8f2:	57 fd       	sbrc	r21, 7
 8f4:	90 58       	subi	r25, 0x80	; 128
 8f6:	44 0f       	add	r20, r20
 8f8:	55 1f       	adc	r21, r21
 8fa:	59 f0       	breq	.+22     	; 0x912 <__fp_splitA+0x10>
 8fc:	5f 3f       	cpi	r21, 0xFF	; 255
 8fe:	71 f0       	breq	.+28     	; 0x91c <__fp_splitA+0x1a>
 900:	47 95       	ror	r20

00000902 <__fp_splitA>:
 902:	88 0f       	add	r24, r24
 904:	97 fb       	bst	r25, 7
 906:	99 1f       	adc	r25, r25
 908:	61 f0       	breq	.+24     	; 0x922 <__fp_splitA+0x20>
 90a:	9f 3f       	cpi	r25, 0xFF	; 255
 90c:	79 f0       	breq	.+30     	; 0x92c <__fp_splitA+0x2a>
 90e:	87 95       	ror	r24
 910:	08 95       	ret
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	55 1f       	adc	r21, r21
 91a:	f2 cf       	rjmp	.-28     	; 0x900 <__stack+0x1>
 91c:	46 95       	lsr	r20
 91e:	f1 df       	rcall	.-30     	; 0x902 <__fp_splitA>
 920:	08 c0       	rjmp	.+16     	; 0x932 <__fp_splitA+0x30>
 922:	16 16       	cp	r1, r22
 924:	17 06       	cpc	r1, r23
 926:	18 06       	cpc	r1, r24
 928:	99 1f       	adc	r25, r25
 92a:	f1 cf       	rjmp	.-30     	; 0x90e <__fp_splitA+0xc>
 92c:	86 95       	lsr	r24
 92e:	71 05       	cpc	r23, r1
 930:	61 05       	cpc	r22, r1
 932:	08 94       	sec
 934:	08 95       	ret

00000936 <__fp_zero>:
 936:	e8 94       	clt

00000938 <__fp_szero>:
 938:	bb 27       	eor	r27, r27
 93a:	66 27       	eor	r22, r22
 93c:	77 27       	eor	r23, r23
 93e:	cb 01       	movw	r24, r22
 940:	97 f9       	bld	r25, 7
 942:	08 95       	ret

00000944 <__gesf2>:
 944:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_cmp>
 948:	08 f4       	brcc	.+2      	; 0x94c <__gesf2+0x8>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	08 95       	ret

0000094e <log10>:
 94e:	0e 94 b7 04 	call	0x96e	; 0x96e <log>
 952:	29 ed       	ldi	r18, 0xD9	; 217
 954:	3b e5       	ldi	r19, 0x5B	; 91
 956:	4e ed       	ldi	r20, 0xDE	; 222
 958:	5e e3       	ldi	r21, 0x3E	; 62
 95a:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__mulsf3>
 95e:	16 f0       	brts	.+4      	; 0x964 <log10+0x16>
 960:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_mpack>
 964:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 968:	68 94       	set
 96a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>

0000096e <log>:
 96e:	0e 94 81 04 	call	0x902	; 0x902 <__fp_splitA>
 972:	a8 f3       	brcs	.-22     	; 0x95e <log10+0x10>
 974:	99 23       	and	r25, r25
 976:	c1 f3       	breq	.-16     	; 0x968 <log10+0x1a>
 978:	ae f3       	brts	.-22     	; 0x964 <log10+0x16>
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	1f 93       	push	r17
 980:	0f 93       	push	r16
 982:	ff 92       	push	r15
 984:	c9 2f       	mov	r28, r25
 986:	dd 27       	eor	r29, r29
 988:	88 23       	and	r24, r24
 98a:	2a f0       	brmi	.+10     	; 0x996 <log+0x28>
 98c:	21 97       	sbiw	r28, 0x01	; 1
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	da f7       	brpl	.-10     	; 0x98c <log+0x1e>
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	40 e8       	ldi	r20, 0x80	; 128
 99c:	5f eb       	ldi	r21, 0xBF	; 191
 99e:	9f e3       	ldi	r25, 0x3F	; 63
 9a0:	88 39       	cpi	r24, 0x98	; 152
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <log+0x3e>
 9a4:	80 3e       	cpi	r24, 0xE0	; 224
 9a6:	38 f0       	brcs	.+14     	; 0x9b6 <log+0x48>
 9a8:	21 96       	adiw	r28, 0x01	; 1
 9aa:	8f 77       	andi	r24, 0x7F	; 127
 9ac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 9b0:	e8 e6       	ldi	r30, 0x68	; 104
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	04 c0       	rjmp	.+8      	; 0x9be <log+0x50>
 9b6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3>
 9ba:	e5 e9       	ldi	r30, 0x95	; 149
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_powser>
 9c2:	8b 01       	movw	r16, r22
 9c4:	be 01       	movw	r22, r28
 9c6:	ec 01       	movw	r28, r24
 9c8:	fb 2e       	mov	r15, r27
 9ca:	6f 57       	subi	r22, 0x7F	; 127
 9cc:	71 09       	sbc	r23, r1
 9ce:	75 95       	asr	r23
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 0b       	sbc	r24, r24
 9d4:	99 0b       	sbc	r25, r25
 9d6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__floatsisf>
 9da:	28 e1       	ldi	r18, 0x18	; 24
 9dc:	32 e7       	ldi	r19, 0x72	; 114
 9de:	41 e3       	ldi	r20, 0x31	; 49
 9e0:	5f e3       	ldi	r21, 0x3F	; 63
 9e2:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulsf3x>
 9e6:	af 2d       	mov	r26, r15
 9e8:	98 01       	movw	r18, r16
 9ea:	ae 01       	movw	r20, r28
 9ec:	ff 90       	pop	r15
 9ee:	0f 91       	pop	r16
 9f0:	1f 91       	pop	r17
 9f2:	cf 91       	pop	r28
 9f4:	df 91       	pop	r29
 9f6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3x>
 9fa:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>

000009fe <__mulsf3>:
 9fe:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulsf3x>
 a02:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 a06:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 a0a:	38 f0       	brcs	.+14     	; 0xa1a <__mulsf3+0x1c>
 a0c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__mulsf3+0x1c>
 a12:	95 23       	and	r25, r21
 a14:	11 f0       	breq	.+4      	; 0xa1a <__mulsf3+0x1c>
 a16:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 a1a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 a1e:	11 24       	eor	r1, r1
 a20:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>

00000a24 <__mulsf3x>:
 a24:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
 a28:	70 f3       	brcs	.-36     	; 0xa06 <__mulsf3+0x8>

00000a2a <__mulsf3_pse>:
 a2a:	95 9f       	mul	r25, r21
 a2c:	c1 f3       	breq	.-16     	; 0xa1e <__mulsf3+0x20>
 a2e:	95 0f       	add	r25, r21
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	55 1f       	adc	r21, r21
 a34:	62 9f       	mul	r22, r18
 a36:	f0 01       	movw	r30, r0
 a38:	72 9f       	mul	r23, r18
 a3a:	bb 27       	eor	r27, r27
 a3c:	f0 0d       	add	r31, r0
 a3e:	b1 1d       	adc	r27, r1
 a40:	63 9f       	mul	r22, r19
 a42:	aa 27       	eor	r26, r26
 a44:	f0 0d       	add	r31, r0
 a46:	b1 1d       	adc	r27, r1
 a48:	aa 1f       	adc	r26, r26
 a4a:	64 9f       	mul	r22, r20
 a4c:	66 27       	eor	r22, r22
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	66 1f       	adc	r22, r22
 a54:	82 9f       	mul	r24, r18
 a56:	22 27       	eor	r18, r18
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	62 1f       	adc	r22, r18
 a5e:	73 9f       	mul	r23, r19
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	62 1f       	adc	r22, r18
 a66:	83 9f       	mul	r24, r19
 a68:	a0 0d       	add	r26, r0
 a6a:	61 1d       	adc	r22, r1
 a6c:	22 1f       	adc	r18, r18
 a6e:	74 9f       	mul	r23, r20
 a70:	33 27       	eor	r19, r19
 a72:	a0 0d       	add	r26, r0
 a74:	61 1d       	adc	r22, r1
 a76:	23 1f       	adc	r18, r19
 a78:	84 9f       	mul	r24, r20
 a7a:	60 0d       	add	r22, r0
 a7c:	21 1d       	adc	r18, r1
 a7e:	82 2f       	mov	r24, r18
 a80:	76 2f       	mov	r23, r22
 a82:	6a 2f       	mov	r22, r26
 a84:	11 24       	eor	r1, r1
 a86:	9f 57       	subi	r25, 0x7F	; 127
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	9a f0       	brmi	.+38     	; 0xab2 <__mulsf3_pse+0x88>
 a8c:	f1 f0       	breq	.+60     	; 0xaca <__mulsf3_pse+0xa0>
 a8e:	88 23       	and	r24, r24
 a90:	4a f0       	brmi	.+18     	; 0xaa4 <__mulsf3_pse+0x7a>
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	bb 1f       	adc	r27, r27
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	91 50       	subi	r25, 0x01	; 1
 aa0:	50 40       	sbci	r21, 0x00	; 0
 aa2:	a9 f7       	brne	.-22     	; 0xa8e <__mulsf3_pse+0x64>
 aa4:	9e 3f       	cpi	r25, 0xFE	; 254
 aa6:	51 05       	cpc	r21, r1
 aa8:	80 f0       	brcs	.+32     	; 0xaca <__mulsf3_pse+0xa0>
 aaa:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 aae:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	e4 f3       	brlt	.-8      	; 0xaae <__mulsf3_pse+0x84>
 ab6:	98 3e       	cpi	r25, 0xE8	; 232
 ab8:	d4 f3       	brlt	.-12     	; 0xaae <__mulsf3_pse+0x84>
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f7 95       	ror	r31
 ac4:	e7 95       	ror	r30
 ac6:	9f 5f       	subi	r25, 0xFF	; 255
 ac8:	c1 f7       	brne	.-16     	; 0xaba <__mulsf3_pse+0x90>
 aca:	fe 2b       	or	r31, r30
 acc:	88 0f       	add	r24, r24
 ace:	91 1d       	adc	r25, r1
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__fp_mpack>:
 ad8:	9f 3f       	cpi	r25, 0xFF	; 255
 ada:	31 f0       	breq	.+12     	; 0xae8 <__fp_mpack_finite+0xc>

00000adc <__fp_mpack_finite>:
 adc:	91 50       	subi	r25, 0x01	; 1
 ade:	20 f4       	brcc	.+8      	; 0xae8 <__fp_mpack_finite+0xc>
 ae0:	87 95       	ror	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b7 95       	ror	r27
 ae8:	88 0f       	add	r24, r24
 aea:	91 1d       	adc	r25, r1
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__fp_powser>:
 af4:	df 93       	push	r29
 af6:	cf 93       	push	r28
 af8:	1f 93       	push	r17
 afa:	0f 93       	push	r16
 afc:	ff 92       	push	r15
 afe:	ef 92       	push	r14
 b00:	df 92       	push	r13
 b02:	7b 01       	movw	r14, r22
 b04:	8c 01       	movw	r16, r24
 b06:	68 94       	set
 b08:	06 c0       	rjmp	.+12     	; 0xb16 <__fp_powser+0x22>
 b0a:	da 2e       	mov	r13, r26
 b0c:	ef 01       	movw	r28, r30
 b0e:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulsf3x>
 b12:	fe 01       	movw	r30, r28
 b14:	e8 94       	clt
 b16:	a5 91       	lpm	r26, Z+
 b18:	25 91       	lpm	r18, Z+
 b1a:	35 91       	lpm	r19, Z+
 b1c:	45 91       	lpm	r20, Z+
 b1e:	55 91       	lpm	r21, Z+
 b20:	a6 f3       	brts	.-24     	; 0xb0a <__fp_powser+0x16>
 b22:	ef 01       	movw	r28, r30
 b24:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3x>
 b28:	fe 01       	movw	r30, r28
 b2a:	97 01       	movw	r18, r14
 b2c:	a8 01       	movw	r20, r16
 b2e:	da 94       	dec	r13
 b30:	69 f7       	brne	.-38     	; 0xb0c <__fp_powser+0x18>
 b32:	df 90       	pop	r13
 b34:	ef 90       	pop	r14
 b36:	ff 90       	pop	r15
 b38:	0f 91       	pop	r16
 b3a:	1f 91       	pop	r17
 b3c:	cf 91       	pop	r28
 b3e:	df 91       	pop	r29
 b40:	08 95       	ret

00000b42 <__itoa_ncheck>:
 b42:	bb 27       	eor	r27, r27
 b44:	4a 30       	cpi	r20, 0x0A	; 10
 b46:	31 f4       	brne	.+12     	; 0xb54 <__itoa_ncheck+0x12>
 b48:	99 23       	and	r25, r25
 b4a:	22 f4       	brpl	.+8      	; 0xb54 <__itoa_ncheck+0x12>
 b4c:	bd e2       	ldi	r27, 0x2D	; 45
 b4e:	90 95       	com	r25
 b50:	81 95       	neg	r24
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__utoa_common>

00000b58 <__utoa_ncheck>:
 b58:	bb 27       	eor	r27, r27

00000b5a <__utoa_common>:
 b5a:	fb 01       	movw	r30, r22
 b5c:	55 27       	eor	r21, r21
 b5e:	aa 27       	eor	r26, r26
 b60:	88 0f       	add	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	aa 1f       	adc	r26, r26
 b66:	a4 17       	cp	r26, r20
 b68:	10 f0       	brcs	.+4      	; 0xb6e <__utoa_common+0x14>
 b6a:	a4 1b       	sub	r26, r20
 b6c:	83 95       	inc	r24
 b6e:	50 51       	subi	r21, 0x10	; 16
 b70:	b9 f7       	brne	.-18     	; 0xb60 <__utoa_common+0x6>
 b72:	a0 5d       	subi	r26, 0xD0	; 208
 b74:	aa 33       	cpi	r26, 0x3A	; 58
 b76:	08 f0       	brcs	.+2      	; 0xb7a <__utoa_common+0x20>
 b78:	a9 5d       	subi	r26, 0xD9	; 217
 b7a:	a1 93       	st	Z+, r26
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	79 f7       	brne	.-34     	; 0xb5e <__utoa_common+0x4>
 b80:	b1 11       	cpse	r27, r1
 b82:	b1 93       	st	Z+, r27
 b84:	11 92       	st	Z+, r1
 b86:	cb 01       	movw	r24, r22
 b88:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <strrev>

00000b8c <strrev>:
 b8c:	dc 01       	movw	r26, r24
 b8e:	fc 01       	movw	r30, r24
 b90:	67 2f       	mov	r22, r23
 b92:	71 91       	ld	r23, Z+
 b94:	77 23       	and	r23, r23
 b96:	e1 f7       	brne	.-8      	; 0xb90 <strrev+0x4>
 b98:	32 97       	sbiw	r30, 0x02	; 2
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <strrev+0x18>
 b9c:	7c 91       	ld	r23, X
 b9e:	6d 93       	st	X+, r22
 ba0:	70 83       	st	Z, r23
 ba2:	62 91       	ld	r22, -Z
 ba4:	ae 17       	cp	r26, r30
 ba6:	bf 07       	cpc	r27, r31
 ba8:	c8 f3       	brcs	.-14     	; 0xb9c <strrev+0x10>
 baa:	08 95       	ret

00000bac <_exit>:
 bac:	f8 94       	cli

00000bae <__stop_program>:
 bae:	ff cf       	rjmp	.-2      	; 0xbae <__stop_program>
