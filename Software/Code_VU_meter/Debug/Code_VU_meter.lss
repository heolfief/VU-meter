
Code_VU_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000cf2  00000d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  00800108  00800108  00000d8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f18  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0b  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eaf  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  0000499c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001608  00000000  00000000  00005781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_7>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_18>
  4c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_19>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_21>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__fixsfsi+0x6>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e2 ef       	ldi	r30, 0xF2	; 242
  d6:	fc e0       	ldi	r31, 0x0C	; 12
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a8 30       	cpi	r26, 0x08	; 8
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a8 e0       	ldi	r26, 0x08	; 8
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 3a       	cpi	r26, 0xAC	; 172
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  f8:	0c 94 77 06 	jmp	0xcee	; 0xcee <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <HC595Write>:
#include "headers/HC595.h"
#include "headers/Config.h"

void HC595Write(uint8_t *led_array)
{
	HC595_PORT &= ~(1<<HC595_RCK);							// Freeze output during shifting
 100:	5c 98       	cbi	0x0b, 4	; 11
	
   for(uint8_t i=sizeof(led_array)-1; i>0; --i)				// For each LED
   {
	   if(led_array[i]==0)	HC595_PORT &= ~(1<<HC595_SER);	// Send Low level signal to DS pin
 102:	fc 01       	movw	r30, r24
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	81 11       	cpse	r24, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <HC595Write+0xe>
 10a:	5f 98       	cbi	0x0b, 7	; 11
 10c:	01 c0       	rjmp	.+2      	; 0x110 <HC595Write+0x10>
	   else					HC595_PORT |=  (1<<HC595_SER);	// Send High level signal to DS pin
 10e:	5f 9a       	sbi	0x0b, 7	; 11
	   
	   HC595_PORT |= (1<<HC595_SCK);						// ...
 110:	5d 9a       	sbi	0x0b, 5	; 11
	   HC595_PORT &= ~(1<<HC595_SCK);						// ... Pulse shift clock
 112:	5d 98       	cbi	0x0b, 5	; 11
   }
   HC595_PORT |= (1<<HC595_RCK);							// Unfreeze output
 114:	5c 9a       	sbi	0x0b, 4	; 11
 116:	08 95       	ret

00000118 <main>:
#include "headers/Config.h"
#include "headers/wdt.h"

int main(void)
{
	wdt_init();
 118:	0e 94 68 03 	call	0x6d0	; 0x6d0 <wdt_init>
	tmr0_init();
 11c:	0e 94 c6 00 	call	0x18c	; 0x18c <tmr0_init>
	tmr2_init();
 120:	0e 94 d5 00 	call	0x1aa	; 0x1aa <tmr2_init>
	adc_init();
 124:	0e 94 ac 00 	call	0x158	; 0x158 <adc_init>
	io_init();
 128:	0e 94 e6 00 	call	0x1cc	; 0x1cc <io_init>
	}
	
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) __attribute__((always_inline));
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) // UCSRC_reg can be used to set other than 8n1 transmission
	{
		UCSR0C_REGISTER = UCSRC_reg;
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
 13c:	88 e9       	ldi	r24, 0x98	; 152
 13e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE);
	uart_init(BAUD_CALC(115200));
	
	sei();		// Enable interrupts
 142:	78 94       	sei
    
	while(1)
    {
		watchdogReset();
 144:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9c e9       	ldi	r25, 0x9C	; 156
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x32>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x38>
 150:	00 00       	nop
		
		_delay_ms(10);
		test();
 152:	0e 94 e7 00 	call	0x1ce	; 0x1ce <test>
 156:	f6 cf       	rjmp	.-20     	; 0x144 <main+0x2c>

00000158 <adc_init>:
int threshold=0;


void adc_init()
{
	ADMUX = AUDIO_ADC_CHANNEL & 0b111;					// Select ADC channel
 158:	ec e7       	ldi	r30, 0x7C	; 124
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	10 82       	st	Z, r1
	ADMUX &= ~((1<<REFS1) | (1<<REFS0));				// VCC used as Voltage Reference
 15e:	80 81       	ld	r24, Z
 160:	8f 73       	andi	r24, 0x3F	; 63
 162:	80 83       	st	Z, r24
	ADCSRB &= ~(1<<ADTS2);								// ...
 164:	eb e7       	ldi	r30, 0x7B	; 123
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1) | (1<<ADTS0);					// ... Trigger ADC on Timer0 compare match A
 16e:	80 81       	ld	r24, Z
 170:	83 60       	ori	r24, 0x03	; 3
 172:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// ... ADC clock prescaler = 128
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	87 60       	ori	r24, 0x07	; 7
 17c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE) | (1<<ADEN) | (1<<ADATE);		// Enable ADC and enable interrupt and enable auto-trigger
 17e:	80 81       	ld	r24, Z
 180:	88 6a       	ori	r24, 0xA8	; 168
 182:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								// Start ADC conversion
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <tmr0_init>:
}

void tmr0_init()
{
	TCNT0=0;											// Reset timer
 18c:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01);								// CTC mode (clear timer on compare match)
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	82 60       	ori	r24, 0x02	; 2
 192:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1<<COM0A1) | (1<<COM0A0));				// Normal port operation, OC0A disconnected.
 194:	84 b5       	in	r24, 0x24	; 36
 196:	8f 73       	andi	r24, 0x3F	; 63
 198:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<CS02);								// ... 
 19a:	85 b5       	in	r24, 0x25	; 37
 19c:	8b 7f       	andi	r24, 0xFB	; 251
 19e:	85 bd       	out	0x25, r24	; 37
	TCCR0B = (1<<CS01)|(1<<CS00);						// ... Timer0 clock prescaler = 64
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;										// compare match every 250 * 1 / (16 000 000 / 64) = 1 ms  -->  1kHz
 1a4:	8a ef       	ldi	r24, 0xFA	; 250
 1a6:	87 bd       	out	0x27, r24	; 39
 1a8:	08 95       	ret

000001aa <tmr2_init>:
}

void tmr2_init()
{
	TCNT2=0;											// Reset timer
 1aa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A |= (1<<WGM21);								// CTC mode (clear timer on compare match)
 1ae:	e0 eb       	ldi	r30, 0xB0	; 176
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
	TCCR2A &= ~((1<<COM2A1) | (1<<COM2A0));				// Normal port operation, OC2A disconnected.
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 73       	andi	r24, 0x3F	; 63
 1bc:	80 83       	st	Z, r24
	TCCR2B = (1<<CS22)| (1<<CS21) | (1<<CS20);			// Timer2 clock prescaler = 1024
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 250;										// compare match every 260 * 1 / (16 000 000 / 1024) = 16.64 ms  -->  60Hz
 1c4:	8a ef       	ldi	r24, 0xFA	; 250
 1c6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1ca:	08 95       	ret

000001cc <io_init>:
}

void io_init()
{
 1cc:	08 95       	ret

000001ce <test>:
	//PORTD = 0xFF;
}

void test()
{
	uart_puts("$");
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 02 03 	call	0x604	; 0x604 <uart0_putstr>
	uart_putint(20*log10(adc_avg+1)*NUMBER_OF_LED/60.2);
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e8       	ldi	r20, 0x80	; 128
 1dc:	5f e3       	ldi	r21, 0x3F	; 63
 1de:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <adc_avg>
 1e2:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <adc_avg+0x1>
 1e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adc_avg+0x2>
 1ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adc_avg+0x3>
 1ee:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 1f2:	0e 94 48 05 	call	0xa90	; 0xa90 <log10>
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 ea       	ldi	r20, 0xA0	; 160
 1fc:	51 e4       	ldi	r21, 0x41	; 65
 1fe:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 ea       	ldi	r20, 0xA0	; 160
 208:	52 e4       	ldi	r21, 0x42	; 66
 20a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 20e:	2d ec       	ldi	r18, 0xCD	; 205
 210:	3c ec       	ldi	r19, 0xCC	; 204
 212:	40 e7       	ldi	r20, 0x70	; 112
 214:	52 e4       	ldi	r21, 0x42	; 66
 216:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divsf3>
 21a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fixsfsi>
 21e:	cb 01       	movw	r24, r22
 220:	0e 94 12 03 	call	0x624	; 0x624 <uart0_putint>
	uart_puts(" ");
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 02 03 	call	0x604	; 0x604 <uart0_putstr>
	uart_putint(peak_value);
 22c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <peak_value>
 230:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <peak_value+0x1>
 234:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <peak_value+0x2>
 238:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <peak_value+0x3>
 23c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fixsfsi>
 240:	cb 01       	movw	r24, r22
 242:	0e 94 12 03 	call	0x624	; 0x624 <uart0_putint>
	uart_puts(";");
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 02 03 	call	0x604	; 0x604 <uart0_putstr>
 24e:	08 95       	ret

00000250 <__vector_21>:
}

ISR(ADC_vect)											// Interrupt on ADC conversion complete
{	
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	4f 92       	push	r4
 25c:	5f 92       	push	r5
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <__vector_21+0x40>
 290:	00 d0       	rcall	.+0      	; 0x292 <__vector_21+0x42>
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	int adc_output = ADC;
 296:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 29a:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	TIFR0=(1<<OCF0A);									// Disable tmr0 comp match a interrupt
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	85 bb       	out	0x15, r24	; 21
	
	if ((ADMUX & 0b111)==AUDIO_ADC_CHANNEL)				// If ADC read audio signal
 2a2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2a6:	87 70       	andi	r24, 0x07	; 7
 2a8:	09 f0       	breq	.+2      	; 0x2ac <__vector_21+0x5c>
 2aa:	06 c1       	rjmp	.+524    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	{	
		if (adc_output < threshold) adc_output = 0;		// Ignore signal under threshold
 2ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threshold>
 2b0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threshold+0x1>
 2b4:	e8 16       	cp	r14, r24
 2b6:	f9 06       	cpc	r15, r25
 2b8:	14 f4       	brge	.+4      	; 0x2be <__vector_21+0x6e>
 2ba:	e1 2c       	mov	r14, r1
 2bc:	f1 2c       	mov	r15, r1
		
		adc_output = adc_output * gain;					// Multiply signal by gain
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2c6:	97 01       	movw	r18, r14
 2c8:	28 9f       	mul	r18, r24
 2ca:	70 01       	movw	r14, r0
 2cc:	29 9f       	mul	r18, r25
 2ce:	f0 0c       	add	r15, r0
 2d0:	38 9f       	mul	r19, r24
 2d2:	f0 0c       	add	r15, r0
 2d4:	11 24       	eor	r1, r1
		
		adc_avg += (((float)adc_output - adc_avg) / AVERAGEWIDTH);	// Pseudo running average
 2d6:	80 90 12 01 	lds	r8, 0x0112	; 0x800112 <adc_avg>
 2da:	90 90 13 01 	lds	r9, 0x0113	; 0x800113 <adc_avg+0x1>
 2de:	a0 90 14 01 	lds	r10, 0x0114	; 0x800114 <adc_avg+0x2>
 2e2:	b0 90 15 01 	lds	r11, 0x0115	; 0x800115 <adc_avg+0x3>
 2e6:	b7 01       	movw	r22, r14
 2e8:	0f 2c       	mov	r0, r15
 2ea:	00 0c       	add	r0, r0
 2ec:	88 0b       	sbc	r24, r24
 2ee:	99 0b       	sbc	r25, r25
 2f0:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 2f4:	a5 01       	movw	r20, r10
 2f6:	94 01       	movw	r18, r8
 2f8:	0e 94 77 03 	call	0x6ee	; 0x6ee <__subsf3>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5e e3       	ldi	r21, 0x3E	; 62
 304:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 308:	a5 01       	movw	r20, r10
 30a:	94 01       	movw	r18, r8
 30c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 310:	2b 01       	movw	r4, r22
 312:	3c 01       	movw	r6, r24
 314:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_avg>
 318:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adc_avg+0x1>
 31c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adc_avg+0x2>
 320:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adc_avg+0x3>
	
		float vu_value = 20*log10(adc_avg+1)*NUMBER_OF_LED/60.2; // 60.2=20*Log10(1024)
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e8       	ldi	r20, 0x80	; 128
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 330:	0e 94 48 05 	call	0xa90	; 0xa90 <log10>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 ea       	ldi	r20, 0xA0	; 160
 33a:	51 e4       	ldi	r21, 0x41	; 65
 33c:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 ea       	ldi	r20, 0xA0	; 160
 346:	52 e4       	ldi	r21, 0x42	; 66
 348:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 34c:	2d ec       	ldi	r18, 0xCD	; 205
 34e:	3c ec       	ldi	r19, 0xCC	; 204
 350:	40 e7       	ldi	r20, 0x70	; 112
 352:	52 e4       	ldi	r21, 0x42	; 66
 354:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divsf3>
 358:	4b 01       	movw	r8, r22
 35a:	5c 01       	movw	r10, r24
	
		if ((peak_ht_cnt*9.948) > PEAK_HOLD_TIME)		// If peak hold time is reached
 35c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <peak_ht_cnt>
 360:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <peak_ht_cnt+0x1>
 364:	07 2e       	mov	r0, r23
 366:	00 0c       	add	r0, r0
 368:	88 0b       	sbc	r24, r24
 36a:	99 0b       	sbc	r25, r25
 36c:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 370:	22 e0       	ldi	r18, 0x02	; 2
 372:	3b e2       	ldi	r19, 0x2B	; 43
 374:	4f e1       	ldi	r20, 0x1F	; 31
 376:	51 e4       	ldi	r21, 0x41	; 65
 378:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	46 e1       	ldi	r20, 0x16	; 22
 382:	54 e4       	ldi	r21, 0x44	; 68
 384:	0e 94 43 05 	call	0xa86	; 0xa86 <__gesf2>
 388:	18 16       	cp	r1, r24
 38a:	8c f5       	brge	.+98     	; 0x3ee <__vector_21+0x19e>
		{
			if (peak_value < PEAK_FALL_RATE) peak_value = 0;// decrease peak value only if it will stay higher than 0
 38c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <peak_value>
 390:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <peak_value+0x1>
 394:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <peak_value+0x2>
 398:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <peak_value+0x3>
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	9a 83       	std	Y+2, r25	; 0x02
 3a0:	ab 83       	std	Y+3, r26	; 0x03
 3a2:	bc 83       	std	Y+4, r27	; 0x04
 3a4:	2d ec       	ldi	r18, 0xCD	; 205
 3a6:	3c ec       	ldi	r19, 0xCC	; 204
 3a8:	4c e4       	ldi	r20, 0x4C	; 76
 3aa:	5e e3       	ldi	r21, 0x3E	; 62
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__cmpsf2>
 3b4:	88 23       	and	r24, r24
 3b6:	4c f4       	brge	.+18     	; 0x3ca <__vector_21+0x17a>
 3b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <peak_value>
 3bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <peak_value+0x1>
 3c0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <peak_value+0x2>
 3c4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <peak_value+0x3>
 3c8:	12 c0       	rjmp	.+36     	; 0x3ee <__vector_21+0x19e>
			else peak_value -= PEAK_FALL_RATE;
 3ca:	2d ec       	ldi	r18, 0xCD	; 205
 3cc:	3c ec       	ldi	r19, 0xCC	; 204
 3ce:	4c e4       	ldi	r20, 0x4C	; 76
 3d0:	5e e3       	ldi	r21, 0x3E	; 62
 3d2:	69 81       	ldd	r22, Y+1	; 0x01
 3d4:	7a 81       	ldd	r23, Y+2	; 0x02
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	9c 81       	ldd	r25, Y+4	; 0x04
 3da:	0e 94 77 03 	call	0x6ee	; 0x6ee <__subsf3>
 3de:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <peak_value>
 3e2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <peak_value+0x1>
 3e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <peak_value+0x2>
 3ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <peak_value+0x3>
		}
		if (vu_value > peak_value)						// If a peak higher than the previous is detected
 3ee:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <peak_value>
 3f2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <peak_value+0x1>
 3f6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <peak_value+0x2>
 3fa:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <peak_value+0x3>
 3fe:	c5 01       	movw	r24, r10
 400:	b4 01       	movw	r22, r8
 402:	0e 94 43 05 	call	0xa86	; 0xa86 <__gesf2>
 406:	18 16       	cp	r1, r24
 408:	64 f4       	brge	.+24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			peak_value = vu_value;						// Store the peak
 40a:	80 92 0c 01 	sts	0x010C, r8	; 0x80010c <peak_value>
 40e:	90 92 0d 01 	sts	0x010D, r9	; 0x80010d <peak_value+0x1>
 412:	a0 92 0e 01 	sts	0x010E, r10	; 0x80010e <peak_value+0x2>
 416:	b0 92 0f 01 	sts	0x010F, r11	; 0x80010f <peak_value+0x3>
			peak_ht_cnt = 0;							// start the peak hold counter
 41a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <peak_ht_cnt+0x1>
 41e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <peak_ht_cnt>
		}
		peak_ht_cnt ++;									// Increase the peak hold counter
 422:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <peak_ht_cnt>
 426:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <peak_ht_cnt+0x1>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <peak_ht_cnt+0x1>
 430:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <peak_ht_cnt>
	
		for (uint8_t i=0; i<vu_value; ++i) led_array[i]=1;	// Fill bottom part of led_array with 1
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	a9 01       	movw	r20, r18
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	0e 94 43 05 	call	0xa86	; 0xa86 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	e4 f4       	brge	.+56     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 446:	1a 82       	std	Y+2, r1	; 0x02
 448:	19 82       	std	Y+1, r1	; 0x01
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	01 e0       	ldi	r16, 0x01	; 1
 44e:	a9 81       	ldd	r26, Y+1	; 0x01
 450:	ba 81       	ldd	r27, Y+2	; 0x02
 452:	a8 5e       	subi	r26, 0xE8	; 232
 454:	be 4f       	sbci	r27, 0xFE	; 254
 456:	0c 93       	st	X, r16
 458:	1f 5f       	subi	r17, 0xFF	; 255
 45a:	e1 2f       	mov	r30, r17
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	fa 83       	std	Y+2, r31	; 0x02
 460:	e9 83       	std	Y+1, r30	; 0x01
 462:	bf 01       	movw	r22, r30
 464:	ff 0f       	add	r31, r31
 466:	88 0b       	sbc	r24, r24
 468:	99 0b       	sbc	r25, r25
 46a:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	c5 01       	movw	r24, r10
 474:	b4 01       	movw	r22, r8
 476:	0e 94 43 05 	call	0xa86	; 0xa86 <__gesf2>
 47a:	18 16       	cp	r1, r24
 47c:	44 f3       	brlt	.-48     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		for (uint8_t i=adc_avg; i<sizeof(led_array); ++i) led_array[i]=0;	// Fill top part of led_array with 0
 47e:	c3 01       	movw	r24, r6
 480:	b2 01       	movw	r22, r4
 482:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
 486:	60 35       	cpi	r22, 0x50	; 80
 488:	40 f4       	brcc	.+16     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 48a:	e6 2f       	mov	r30, r22
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	e8 5e       	subi	r30, 0xE8	; 232
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	10 82       	st	Z, r1
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	60 35       	cpi	r22, 0x50	; 80
 498:	c1 f7       	brne	.-16     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
	
		led_array[(int)peak_value]=1;					// Light up peak led	
 49a:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <peak_value>
 49e:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <peak_value+0x1>
 4a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <peak_value+0x2>
 4a6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <peak_value+0x3>
 4aa:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fixsfsi>
 4ae:	fb 01       	movw	r30, r22
 4b0:	e8 5e       	subi	r30, 0xE8	; 232
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 83       	st	Z, r24
	}
	
	if ((ADMUX & 0b111)==GAIN_ADC_CHANNEL)				// If ADC read gain level
 4b8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 4bc:	87 70       	andi	r24, 0x07	; 7
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	09 f5       	brne	.+66     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	{
		gain = (float)adc_output * (GAIN_MAX - GAIN_MIN) / (1023.0) + GAIN_MIN;	// Map gain between GAIN_MIN and GAIN_MAX
 4c2:	b7 01       	movw	r22, r14
 4c4:	0f 2c       	mov	r0, r15
 4c6:	00 0c       	add	r0, r0
 4c8:	88 0b       	sbc	r24, r24
 4ca:	99 0b       	sbc	r25, r25
 4cc:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	40 ec       	ldi	r20, 0xC0	; 192
 4d6:	5f e3       	ldi	r21, 0x3F	; 63
 4d8:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 ec       	ldi	r19, 0xC0	; 192
 4e0:	4f e7       	ldi	r20, 0x7F	; 127
 4e2:	54 e4       	ldi	r21, 0x44	; 68
 4e4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divsf3>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	5f e3       	ldi	r21, 0x3F	; 63
 4f0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 4f4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fixsfsi>
 4f8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 4fc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
		ADMUX = AUDIO_ADC_CHANNEL & 0b111;				// Select back ADC channel
 500:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
	
	if ((ADMUX & 0b111)==THRESHOLD_ADC_CHANNEL)			// If ADC read threshold level
 504:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 508:	87 70       	andi	r24, 0x07	; 7
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	31 f4       	brne	.+12     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	{
		threshold = adc_output;
 50e:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <threshold+0x1>
 512:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <threshold>
		ADMUX = AUDIO_ADC_CHANNEL & 0b111;				// Select back ADC channel
 516:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
}
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	bf 90       	pop	r11
 548:	af 90       	pop	r10
 54a:	9f 90       	pop	r9
 54c:	8f 90       	pop	r8
 54e:	7f 90       	pop	r7
 550:	6f 90       	pop	r6
 552:	5f 90       	pop	r5
 554:	4f 90       	pop	r4
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_7>:

ISR(TIMER2_COMPA_vect)									// Interrupt on timer2 compare match
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31
	static int cnt;										// Counter to alternate between ADC channel selection
	
	HC595Write(led_array);								// Light up LEDs
 582:	88 e1       	ldi	r24, 0x18	; 24
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 80 00 	call	0x100	; 0x100 <HC595Write>
	
	if(cnt & 1) ADMUX = GAIN_ADC_CHANNEL & 0b111;		// ...
 58a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 58e:	80 ff       	sbrs	r24, 0
 590:	04 c0       	rjmp	.+8      	; 0x59a <__vector_7+0x3a>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <__vector_7+0x40>
	else ADMUX = THRESHOLD_ADC_CHANNEL & 0b111;			// ... Alternate between ADC channel selection
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	++cnt;												// Increase counter
 5a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 5a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 5ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	7f 91       	pop	r23
 5c0:	6f 91       	pop	r22
 5c2:	5f 91       	pop	r21
 5c4:	4f 91       	pop	r20
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <uart0_putc>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
 5d4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tx0_Head>
 5d8:	9f 5f       	subi	r25, 0xFF	; 255
 5da:	9f 71       	andi	r25, 0x1F	; 31
 5dc:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <tx0_Tail>
 5e0:	92 17       	cp	r25, r18
 5e2:	e1 f3       	breq	.-8      	; 0x5dc <uart0_putc+0x8>
 5e4:	e9 2f       	mov	r30, r25
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	e4 57       	subi	r30, 0x74	; 116
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	80 83       	st	Z, r24
 5ee:	2f b7       	in	r18, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <tx0_Head>
 5f6:	e1 ec       	ldi	r30, 0xC1	; 193
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	80 62       	ori	r24, 0x20	; 32
 5fe:	80 83       	st	Z, r24
 600:	2f bf       	out	0x3f, r18	; 63
 602:	08 95       	ret

00000604 <uart0_putstr>:
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	ec 01       	movw	r28, r24
 60a:	21 96       	adiw	r28, 0x01	; 1
 60c:	fc 01       	movw	r30, r24
 60e:	80 81       	ld	r24, Z
 610:	88 23       	and	r24, r24
 612:	29 f0       	breq	.+10     	; 0x61e <uart0_putstr+0x1a>
 614:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uart0_putc>
 618:	89 91       	ld	r24, Y+
 61a:	81 11       	cpse	r24, r1
 61c:	fb cf       	rjmp	.-10     	; 0x614 <uart0_putstr+0x10>
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <uart0_putint>:
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	27 97       	sbiw	r28, 0x07	; 7
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	4a e0       	ldi	r20, 0x0A	; 10
 63a:	be 01       	movw	r22, r28
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	0e 94 42 06 	call	0xc84	; 0xc84 <__itoa_ncheck>
 644:	ce 01       	movw	r24, r28
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	0e 94 02 03 	call	0x604	; 0x604 <uart0_putstr>
 64c:	27 96       	adiw	r28, 0x07	; 7
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 65e:	0f 93       	push	r16
 660:	0f b7       	in	r16, 0x3f	; 63
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
 666:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <tx0_Tail>
 66a:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <tx0_Head>
 66e:	e3 95       	inc	r30
 670:	ef 71       	andi	r30, 0x1F	; 31
 672:	ef 13       	cpse	r30, r31
 674:	05 c0       	rjmp	.+10     	; 0x680 <USART0_TX_CONTINUE>
 676:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 67a:	ff 7d       	andi	r31, 0xDF	; 223
 67c:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000680 <USART0_TX_CONTINUE>:
 680:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <tx0_Tail>
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	e4 57       	subi	r30, 0x74	; 116
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	e0 81       	ld	r30, Z
 68c:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000690 <USART0_TX_EXIT>:
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	0f bf       	out	0x3f, r16	; 63
 696:	0f 91       	pop	r16
 698:	18 95       	reti

0000069a <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 69a:	0f 93       	push	r16
 69c:	0f b7       	in	r16, 0x3f	; 63
 69e:	9f 93       	push	r25
 6a0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
 6a8:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <rx0_Head>
 6ac:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <rx0_Tail>
 6b0:	e3 95       	inc	r30
 6b2:	ef 71       	andi	r30, 0x1F	; 31
 6b4:	fe 17       	cp	r31, r30
 6b6:	31 f0       	breq	.+12     	; 0x6c4 <USART0_RX_EXIT>
 6b8:	e0 93 8b 01 	sts	0x018B, r30	; 0x80018b <rx0_Head>
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	e8 59       	subi	r30, 0x98	; 152
 6c0:	fe 4f       	sbci	r31, 0xFE	; 254
 6c2:	90 83       	st	Z, r25

000006c4 <USART0_RX_EXIT>:
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	9f 91       	pop	r25
 6ca:	0f bf       	out	0x3f, r16	; 63
 6cc:	0f 91       	pop	r16
 6ce:	18 95       	reti

000006d0 <wdt_init>:
#include "headers/wdt.h"


void wdt_init()
{
	WDTCSR |= (1<<WDE);									// ...
 6d0:	e0 e6       	ldi	r30, 0x60	; 96
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	88 60       	ori	r24, 0x08	; 8
 6d8:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDIE);								// ... Watchdog on System Reset Mode
 6da:	80 81       	ld	r24, Z
 6dc:	8f 7b       	andi	r24, 0xBF	; 191
 6de:	80 83       	st	Z, r24
	WDTCSR |= (1<<WDP2) |(1<<WDP0);						// ...
 6e0:	80 81       	ld	r24, Z
 6e2:	85 60       	ori	r24, 0x05	; 5
 6e4:	80 83       	st	Z, r24
	WDTCSR &= ~(1<<WDP1);								// ... Watchdog time-out at 0.5s
 6e6:	80 81       	ld	r24, Z
 6e8:	8d 7f       	andi	r24, 0xFD	; 253
 6ea:	80 83       	st	Z, r24
 6ec:	08 95       	ret

000006ee <__subsf3>:
 6ee:	50 58       	subi	r21, 0x80	; 128

000006f0 <__addsf3>:
 6f0:	bb 27       	eor	r27, r27
 6f2:	aa 27       	eor	r26, r26
 6f4:	0e 94 8f 03 	call	0x71e	; 0x71e <__addsf3x>
 6f8:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 6fc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 700:	38 f0       	brcs	.+14     	; 0x710 <__addsf3+0x20>
 702:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 706:	20 f0       	brcs	.+8      	; 0x710 <__addsf3+0x20>
 708:	39 f4       	brne	.+14     	; 0x718 <__addsf3+0x28>
 70a:	9f 3f       	cpi	r25, 0xFF	; 255
 70c:	19 f4       	brne	.+6      	; 0x714 <__addsf3+0x24>
 70e:	26 f4       	brtc	.+8      	; 0x718 <__addsf3+0x28>
 710:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>
 714:	0e f4       	brtc	.+2      	; 0x718 <__addsf3+0x28>
 716:	e0 95       	com	r30
 718:	e7 fb       	bst	r30, 7
 71a:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>

0000071e <__addsf3x>:
 71e:	e9 2f       	mov	r30, r25
 720:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 724:	58 f3       	brcs	.-42     	; 0x6fc <__addsf3+0xc>
 726:	ba 17       	cp	r27, r26
 728:	62 07       	cpc	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	95 07       	cpc	r25, r21
 730:	20 f0       	brcs	.+8      	; 0x73a <__addsf3x+0x1c>
 732:	79 f4       	brne	.+30     	; 0x752 <__addsf3x+0x34>
 734:	a6 f5       	brtc	.+104    	; 0x79e <__addsf3x+0x80>
 736:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_zero>
 73a:	0e f4       	brtc	.+2      	; 0x73e <__addsf3x+0x20>
 73c:	e0 95       	com	r30
 73e:	0b 2e       	mov	r0, r27
 740:	ba 2f       	mov	r27, r26
 742:	a0 2d       	mov	r26, r0
 744:	0b 01       	movw	r0, r22
 746:	b9 01       	movw	r22, r18
 748:	90 01       	movw	r18, r0
 74a:	0c 01       	movw	r0, r24
 74c:	ca 01       	movw	r24, r20
 74e:	a0 01       	movw	r20, r0
 750:	11 24       	eor	r1, r1
 752:	ff 27       	eor	r31, r31
 754:	59 1b       	sub	r21, r25
 756:	99 f0       	breq	.+38     	; 0x77e <__addsf3x+0x60>
 758:	59 3f       	cpi	r21, 0xF9	; 249
 75a:	50 f4       	brcc	.+20     	; 0x770 <__addsf3x+0x52>
 75c:	50 3e       	cpi	r21, 0xE0	; 224
 75e:	68 f1       	brcs	.+90     	; 0x7ba <__addsf3x+0x9c>
 760:	1a 16       	cp	r1, r26
 762:	f0 40       	sbci	r31, 0x00	; 0
 764:	a2 2f       	mov	r26, r18
 766:	23 2f       	mov	r18, r19
 768:	34 2f       	mov	r19, r20
 76a:	44 27       	eor	r20, r20
 76c:	58 5f       	subi	r21, 0xF8	; 248
 76e:	f3 cf       	rjmp	.-26     	; 0x756 <__addsf3x+0x38>
 770:	46 95       	lsr	r20
 772:	37 95       	ror	r19
 774:	27 95       	ror	r18
 776:	a7 95       	ror	r26
 778:	f0 40       	sbci	r31, 0x00	; 0
 77a:	53 95       	inc	r21
 77c:	c9 f7       	brne	.-14     	; 0x770 <__addsf3x+0x52>
 77e:	7e f4       	brtc	.+30     	; 0x79e <__addsf3x+0x80>
 780:	1f 16       	cp	r1, r31
 782:	ba 0b       	sbc	r27, r26
 784:	62 0b       	sbc	r22, r18
 786:	73 0b       	sbc	r23, r19
 788:	84 0b       	sbc	r24, r20
 78a:	ba f0       	brmi	.+46     	; 0x7ba <__addsf3x+0x9c>
 78c:	91 50       	subi	r25, 0x01	; 1
 78e:	a1 f0       	breq	.+40     	; 0x7b8 <__addsf3x+0x9a>
 790:	ff 0f       	add	r31, r31
 792:	bb 1f       	adc	r27, r27
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	c2 f7       	brpl	.-16     	; 0x78c <__addsf3x+0x6e>
 79c:	0e c0       	rjmp	.+28     	; 0x7ba <__addsf3x+0x9c>
 79e:	ba 0f       	add	r27, r26
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 1f       	adc	r23, r19
 7a4:	84 1f       	adc	r24, r20
 7a6:	48 f4       	brcc	.+18     	; 0x7ba <__addsf3x+0x9c>
 7a8:	87 95       	ror	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	b7 95       	ror	r27
 7b0:	f7 95       	ror	r31
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <__addsf3x+0x9a>
 7b6:	b0 cf       	rjmp	.-160    	; 0x718 <__addsf3+0x28>
 7b8:	93 95       	inc	r25
 7ba:	88 0f       	add	r24, r24
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__addsf3x+0xa2>
 7be:	99 27       	eor	r25, r25
 7c0:	ee 0f       	add	r30, r30
 7c2:	97 95       	ror	r25
 7c4:	87 95       	ror	r24
 7c6:	08 95       	ret

000007c8 <__cmpsf2>:
 7c8:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_cmp>
 7cc:	08 f4       	brcc	.+2      	; 0x7d0 <__cmpsf2+0x8>
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	08 95       	ret

000007d2 <__divsf3>:
 7d2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divsf3x>
 7d6:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 7da:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 7de:	58 f0       	brcs	.+22     	; 0x7f6 <__divsf3+0x24>
 7e0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 7e4:	40 f0       	brcs	.+16     	; 0x7f6 <__divsf3+0x24>
 7e6:	29 f4       	brne	.+10     	; 0x7f2 <__divsf3+0x20>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	29 f0       	breq	.+10     	; 0x7f6 <__divsf3+0x24>
 7ec:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 7f0:	51 11       	cpse	r21, r1
 7f2:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 7f6:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>

000007fa <__divsf3x>:
 7fa:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 7fe:	68 f3       	brcs	.-38     	; 0x7da <__divsf3+0x8>

00000800 <__divsf3_pse>:
 800:	99 23       	and	r25, r25
 802:	b1 f3       	breq	.-20     	; 0x7f0 <__divsf3+0x1e>
 804:	55 23       	and	r21, r21
 806:	91 f3       	breq	.-28     	; 0x7ec <__divsf3+0x1a>
 808:	95 1b       	sub	r25, r21
 80a:	55 0b       	sbc	r21, r21
 80c:	bb 27       	eor	r27, r27
 80e:	aa 27       	eor	r26, r26
 810:	62 17       	cp	r22, r18
 812:	73 07       	cpc	r23, r19
 814:	84 07       	cpc	r24, r20
 816:	38 f0       	brcs	.+14     	; 0x826 <__divsf3_pse+0x26>
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	22 0f       	add	r18, r18
 81e:	33 1f       	adc	r19, r19
 820:	44 1f       	adc	r20, r20
 822:	aa 1f       	adc	r26, r26
 824:	a9 f3       	breq	.-22     	; 0x810 <__divsf3_pse+0x10>
 826:	35 d0       	rcall	.+106    	; 0x892 <__divsf3_pse+0x92>
 828:	0e 2e       	mov	r0, r30
 82a:	3a f0       	brmi	.+14     	; 0x83a <__divsf3_pse+0x3a>
 82c:	e0 e8       	ldi	r30, 0x80	; 128
 82e:	32 d0       	rcall	.+100    	; 0x894 <__divsf3_pse+0x94>
 830:	91 50       	subi	r25, 0x01	; 1
 832:	50 40       	sbci	r21, 0x00	; 0
 834:	e6 95       	lsr	r30
 836:	00 1c       	adc	r0, r0
 838:	ca f7       	brpl	.-14     	; 0x82c <__divsf3_pse+0x2c>
 83a:	2b d0       	rcall	.+86     	; 0x892 <__divsf3_pse+0x92>
 83c:	fe 2f       	mov	r31, r30
 83e:	29 d0       	rcall	.+82     	; 0x892 <__divsf3_pse+0x92>
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	bb 1f       	adc	r27, r27
 848:	26 17       	cp	r18, r22
 84a:	37 07       	cpc	r19, r23
 84c:	48 07       	cpc	r20, r24
 84e:	ab 07       	cpc	r26, r27
 850:	b0 e8       	ldi	r27, 0x80	; 128
 852:	09 f0       	breq	.+2      	; 0x856 <__divsf3_pse+0x56>
 854:	bb 0b       	sbc	r27, r27
 856:	80 2d       	mov	r24, r0
 858:	bf 01       	movw	r22, r30
 85a:	ff 27       	eor	r31, r31
 85c:	93 58       	subi	r25, 0x83	; 131
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	3a f0       	brmi	.+14     	; 0x870 <__divsf3_pse+0x70>
 862:	9e 3f       	cpi	r25, 0xFE	; 254
 864:	51 05       	cpc	r21, r1
 866:	78 f0       	brcs	.+30     	; 0x886 <__divsf3_pse+0x86>
 868:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 86c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	e4 f3       	brlt	.-8      	; 0x86c <__divsf3_pse+0x6c>
 874:	98 3e       	cpi	r25, 0xE8	; 232
 876:	d4 f3       	brlt	.-12     	; 0x86c <__divsf3_pse+0x6c>
 878:	86 95       	lsr	r24
 87a:	77 95       	ror	r23
 87c:	67 95       	ror	r22
 87e:	b7 95       	ror	r27
 880:	f7 95       	ror	r31
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	c9 f7       	brne	.-14     	; 0x878 <__divsf3_pse+0x78>
 886:	88 0f       	add	r24, r24
 888:	91 1d       	adc	r25, r1
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret
 892:	e1 e0       	ldi	r30, 0x01	; 1
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	bb 1f       	adc	r27, r27
 89c:	62 17       	cp	r22, r18
 89e:	73 07       	cpc	r23, r19
 8a0:	84 07       	cpc	r24, r20
 8a2:	ba 07       	cpc	r27, r26
 8a4:	20 f0       	brcs	.+8      	; 0x8ae <__divsf3_pse+0xae>
 8a6:	62 1b       	sub	r22, r18
 8a8:	73 0b       	sbc	r23, r19
 8aa:	84 0b       	sbc	r24, r20
 8ac:	ba 0b       	sbc	r27, r26
 8ae:	ee 1f       	adc	r30, r30
 8b0:	88 f7       	brcc	.-30     	; 0x894 <__divsf3_pse+0x94>
 8b2:	e0 95       	com	r30
 8b4:	08 95       	ret

000008b6 <__fixsfsi>:
 8b6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixunssfsi>
 8ba:	68 94       	set
 8bc:	b1 11       	cpse	r27, r1
 8be:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 8c2:	08 95       	ret

000008c4 <__fixunssfsi>:
 8c4:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_splitA>
 8c8:	88 f0       	brcs	.+34     	; 0x8ec <__fixunssfsi+0x28>
 8ca:	9f 57       	subi	r25, 0x7F	; 127
 8cc:	98 f0       	brcs	.+38     	; 0x8f4 <__fixunssfsi+0x30>
 8ce:	b9 2f       	mov	r27, r25
 8d0:	99 27       	eor	r25, r25
 8d2:	b7 51       	subi	r27, 0x17	; 23
 8d4:	b0 f0       	brcs	.+44     	; 0x902 <__stack+0x3>
 8d6:	e1 f0       	breq	.+56     	; 0x910 <__stack+0x11>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	1a f0       	brmi	.+6      	; 0x8e8 <__fixunssfsi+0x24>
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__fixunssfsi+0x14>
 8e6:	14 c0       	rjmp	.+40     	; 0x910 <__stack+0x11>
 8e8:	b1 30       	cpi	r27, 0x01	; 1
 8ea:	91 f0       	breq	.+36     	; 0x910 <__stack+0x11>
 8ec:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_zero>
 8f0:	b1 e0       	ldi	r27, 0x01	; 1
 8f2:	08 95       	ret
 8f4:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_zero>
 8f8:	67 2f       	mov	r22, r23
 8fa:	78 2f       	mov	r23, r24
 8fc:	88 27       	eor	r24, r24
 8fe:	b8 5f       	subi	r27, 0xF8	; 248
 900:	39 f0       	breq	.+14     	; 0x910 <__stack+0x11>
 902:	b9 3f       	cpi	r27, 0xF9	; 249
 904:	cc f3       	brlt	.-14     	; 0x8f8 <__fixunssfsi+0x34>
 906:	86 95       	lsr	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b3 95       	inc	r27
 90e:	d9 f7       	brne	.-10     	; 0x906 <__stack+0x7>
 910:	3e f4       	brtc	.+14     	; 0x920 <__stack+0x21>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	08 95       	ret

00000922 <__floatunsisf>:
 922:	e8 94       	clt
 924:	09 c0       	rjmp	.+18     	; 0x938 <__floatsisf+0x12>

00000926 <__floatsisf>:
 926:	97 fb       	bst	r25, 7
 928:	3e f4       	brtc	.+14     	; 0x938 <__floatsisf+0x12>
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	99 23       	and	r25, r25
 93a:	a9 f0       	breq	.+42     	; 0x966 <__floatsisf+0x40>
 93c:	f9 2f       	mov	r31, r25
 93e:	96 e9       	ldi	r25, 0x96	; 150
 940:	bb 27       	eor	r27, r27
 942:	93 95       	inc	r25
 944:	f6 95       	lsr	r31
 946:	87 95       	ror	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f1 11       	cpse	r31, r1
 950:	f8 cf       	rjmp	.-16     	; 0x942 <__floatsisf+0x1c>
 952:	fa f4       	brpl	.+62     	; 0x992 <__floatsisf+0x6c>
 954:	bb 0f       	add	r27, r27
 956:	11 f4       	brne	.+4      	; 0x95c <__floatsisf+0x36>
 958:	60 ff       	sbrs	r22, 0
 95a:	1b c0       	rjmp	.+54     	; 0x992 <__floatsisf+0x6c>
 95c:	6f 5f       	subi	r22, 0xFF	; 255
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	16 c0       	rjmp	.+44     	; 0x992 <__floatsisf+0x6c>
 966:	88 23       	and	r24, r24
 968:	11 f0       	breq	.+4      	; 0x96e <__floatsisf+0x48>
 96a:	96 e9       	ldi	r25, 0x96	; 150
 96c:	11 c0       	rjmp	.+34     	; 0x990 <__floatsisf+0x6a>
 96e:	77 23       	and	r23, r23
 970:	21 f0       	breq	.+8      	; 0x97a <__floatsisf+0x54>
 972:	9e e8       	ldi	r25, 0x8E	; 142
 974:	87 2f       	mov	r24, r23
 976:	76 2f       	mov	r23, r22
 978:	05 c0       	rjmp	.+10     	; 0x984 <__floatsisf+0x5e>
 97a:	66 23       	and	r22, r22
 97c:	71 f0       	breq	.+28     	; 0x99a <__floatsisf+0x74>
 97e:	96 e8       	ldi	r25, 0x86	; 134
 980:	86 2f       	mov	r24, r22
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	2a f0       	brmi	.+10     	; 0x992 <__floatsisf+0x6c>
 988:	9a 95       	dec	r25
 98a:	66 0f       	add	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	da f7       	brpl	.-10     	; 0x988 <__floatsisf+0x62>
 992:	88 0f       	add	r24, r24
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret

0000099c <__fp_cmp>:
 99c:	99 0f       	add	r25, r25
 99e:	00 08       	sbc	r0, r0
 9a0:	55 0f       	add	r21, r21
 9a2:	aa 0b       	sbc	r26, r26
 9a4:	e0 e8       	ldi	r30, 0x80	; 128
 9a6:	fe ef       	ldi	r31, 0xFE	; 254
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	e8 07       	cpc	r30, r24
 9ae:	f9 07       	cpc	r31, r25
 9b0:	c0 f0       	brcs	.+48     	; 0x9e2 <__fp_cmp+0x46>
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	e4 07       	cpc	r30, r20
 9b8:	f5 07       	cpc	r31, r21
 9ba:	98 f0       	brcs	.+38     	; 0x9e2 <__fp_cmp+0x46>
 9bc:	62 1b       	sub	r22, r18
 9be:	73 0b       	sbc	r23, r19
 9c0:	84 0b       	sbc	r24, r20
 9c2:	95 0b       	sbc	r25, r21
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <__fp_cmp+0x38>
 9c6:	0a 26       	eor	r0, r26
 9c8:	61 f0       	breq	.+24     	; 0x9e2 <__fp_cmp+0x46>
 9ca:	23 2b       	or	r18, r19
 9cc:	24 2b       	or	r18, r20
 9ce:	25 2b       	or	r18, r21
 9d0:	21 f4       	brne	.+8      	; 0x9da <__fp_cmp+0x3e>
 9d2:	08 95       	ret
 9d4:	0a 26       	eor	r0, r26
 9d6:	09 f4       	brne	.+2      	; 0x9da <__fp_cmp+0x3e>
 9d8:	a1 40       	sbci	r26, 0x01	; 1
 9da:	a6 95       	lsr	r26
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	81 1d       	adc	r24, r1
 9e0:	81 1d       	adc	r24, r1
 9e2:	08 95       	ret

000009e4 <__fp_inf>:
 9e4:	97 f9       	bld	r25, 7
 9e6:	9f 67       	ori	r25, 0x7F	; 127
 9e8:	80 e8       	ldi	r24, 0x80	; 128
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	08 95       	ret

000009f0 <__fp_nan>:
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	80 ec       	ldi	r24, 0xC0	; 192
 9f4:	08 95       	ret

000009f6 <__fp_pscA>:
 9f6:	00 24       	eor	r0, r0
 9f8:	0a 94       	dec	r0
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	18 06       	cpc	r1, r24
 a00:	09 06       	cpc	r0, r25
 a02:	08 95       	ret

00000a04 <__fp_pscB>:
 a04:	00 24       	eor	r0, r0
 a06:	0a 94       	dec	r0
 a08:	12 16       	cp	r1, r18
 a0a:	13 06       	cpc	r1, r19
 a0c:	14 06       	cpc	r1, r20
 a0e:	05 06       	cpc	r0, r21
 a10:	08 95       	ret

00000a12 <__fp_round>:
 a12:	09 2e       	mov	r0, r25
 a14:	03 94       	inc	r0
 a16:	00 0c       	add	r0, r0
 a18:	11 f4       	brne	.+4      	; 0xa1e <__fp_round+0xc>
 a1a:	88 23       	and	r24, r24
 a1c:	52 f0       	brmi	.+20     	; 0xa32 <__fp_round+0x20>
 a1e:	bb 0f       	add	r27, r27
 a20:	40 f4       	brcc	.+16     	; 0xa32 <__fp_round+0x20>
 a22:	bf 2b       	or	r27, r31
 a24:	11 f4       	brne	.+4      	; 0xa2a <__fp_round+0x18>
 a26:	60 ff       	sbrs	r22, 0
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <__fp_round+0x20>
 a2a:	6f 5f       	subi	r22, 0xFF	; 255
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	08 95       	ret

00000a34 <__fp_split3>:
 a34:	57 fd       	sbrc	r21, 7
 a36:	90 58       	subi	r25, 0x80	; 128
 a38:	44 0f       	add	r20, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	59 f0       	breq	.+22     	; 0xa54 <__fp_splitA+0x10>
 a3e:	5f 3f       	cpi	r21, 0xFF	; 255
 a40:	71 f0       	breq	.+28     	; 0xa5e <__fp_splitA+0x1a>
 a42:	47 95       	ror	r20

00000a44 <__fp_splitA>:
 a44:	88 0f       	add	r24, r24
 a46:	97 fb       	bst	r25, 7
 a48:	99 1f       	adc	r25, r25
 a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_splitA+0x20>
 a4c:	9f 3f       	cpi	r25, 0xFF	; 255
 a4e:	79 f0       	breq	.+30     	; 0xa6e <__fp_splitA+0x2a>
 a50:	87 95       	ror	r24
 a52:	08 95       	ret
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	14 06       	cpc	r1, r20
 a5a:	55 1f       	adc	r21, r21
 a5c:	f2 cf       	rjmp	.-28     	; 0xa42 <__fp_split3+0xe>
 a5e:	46 95       	lsr	r20
 a60:	f1 df       	rcall	.-30     	; 0xa44 <__fp_splitA>
 a62:	08 c0       	rjmp	.+16     	; 0xa74 <__fp_splitA+0x30>
 a64:	16 16       	cp	r1, r22
 a66:	17 06       	cpc	r1, r23
 a68:	18 06       	cpc	r1, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	f1 cf       	rjmp	.-30     	; 0xa50 <__fp_splitA+0xc>
 a6e:	86 95       	lsr	r24
 a70:	71 05       	cpc	r23, r1
 a72:	61 05       	cpc	r22, r1
 a74:	08 94       	sec
 a76:	08 95       	ret

00000a78 <__fp_zero>:
 a78:	e8 94       	clt

00000a7a <__fp_szero>:
 a7a:	bb 27       	eor	r27, r27
 a7c:	66 27       	eor	r22, r22
 a7e:	77 27       	eor	r23, r23
 a80:	cb 01       	movw	r24, r22
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__gesf2>:
 a86:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_cmp>
 a8a:	08 f4       	brcc	.+2      	; 0xa8e <__gesf2+0x8>
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	08 95       	ret

00000a90 <log10>:
 a90:	0e 94 58 05 	call	0xab0	; 0xab0 <log>
 a94:	29 ed       	ldi	r18, 0xD9	; 217
 a96:	3b e5       	ldi	r19, 0x5B	; 91
 a98:	4e ed       	ldi	r20, 0xDE	; 222
 a9a:	5e e3       	ldi	r21, 0x3E	; 62
 a9c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__mulsf3>
 aa0:	16 f0       	brts	.+4      	; 0xaa6 <log10+0x16>
 aa2:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_mpack>
 aa6:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>
 aaa:	68 94       	set
 aac:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>

00000ab0 <log>:
 ab0:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_splitA>
 ab4:	a8 f3       	brcs	.-22     	; 0xaa0 <log10+0x10>
 ab6:	99 23       	and	r25, r25
 ab8:	c1 f3       	breq	.-16     	; 0xaaa <log10+0x1a>
 aba:	ae f3       	brts	.-22     	; 0xaa6 <log10+0x16>
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	1f 93       	push	r17
 ac2:	0f 93       	push	r16
 ac4:	ff 92       	push	r15
 ac6:	c9 2f       	mov	r28, r25
 ac8:	dd 27       	eor	r29, r29
 aca:	88 23       	and	r24, r24
 acc:	2a f0       	brmi	.+10     	; 0xad8 <log+0x28>
 ace:	21 97       	sbiw	r28, 0x01	; 1
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	da f7       	brpl	.-10     	; 0xace <log+0x1e>
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	40 e8       	ldi	r20, 0x80	; 128
 ade:	5f eb       	ldi	r21, 0xBF	; 191
 ae0:	9f e3       	ldi	r25, 0x3F	; 63
 ae2:	88 39       	cpi	r24, 0x98	; 152
 ae4:	20 f0       	brcs	.+8      	; 0xaee <log+0x3e>
 ae6:	80 3e       	cpi	r24, 0xE0	; 224
 ae8:	38 f0       	brcs	.+14     	; 0xaf8 <log+0x48>
 aea:	21 96       	adiw	r28, 0x01	; 1
 aec:	8f 77       	andi	r24, 0x7F	; 127
 aee:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 af2:	e8 e6       	ldi	r30, 0x68	; 104
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	04 c0       	rjmp	.+8      	; 0xb00 <log+0x50>
 af8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 afc:	e5 e9       	ldi	r30, 0x95	; 149
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_powser>
 b04:	8b 01       	movw	r16, r22
 b06:	be 01       	movw	r22, r28
 b08:	ec 01       	movw	r28, r24
 b0a:	fb 2e       	mov	r15, r27
 b0c:	6f 57       	subi	r22, 0x7F	; 127
 b0e:	71 09       	sbc	r23, r1
 b10:	75 95       	asr	r23
 b12:	77 1f       	adc	r23, r23
 b14:	88 0b       	sbc	r24, r24
 b16:	99 0b       	sbc	r25, r25
 b18:	0e 94 93 04 	call	0x926	; 0x926 <__floatsisf>
 b1c:	28 e1       	ldi	r18, 0x18	; 24
 b1e:	32 e7       	ldi	r19, 0x72	; 114
 b20:	41 e3       	ldi	r20, 0x31	; 49
 b22:	5f e3       	ldi	r21, 0x3F	; 63
 b24:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3x>
 b28:	af 2d       	mov	r26, r15
 b2a:	98 01       	movw	r18, r16
 b2c:	ae 01       	movw	r20, r28
 b2e:	ff 90       	pop	r15
 b30:	0f 91       	pop	r16
 b32:	1f 91       	pop	r17
 b34:	cf 91       	pop	r28
 b36:	df 91       	pop	r29
 b38:	0e 94 8f 03 	call	0x71e	; 0x71e <__addsf3x>
 b3c:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>

00000b40 <__mulsf3>:
 b40:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3x>
 b44:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_round>
 b48:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_pscA>
 b4c:	38 f0       	brcs	.+14     	; 0xb5c <__mulsf3+0x1c>
 b4e:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_pscB>
 b52:	20 f0       	brcs	.+8      	; 0xb5c <__mulsf3+0x1c>
 b54:	95 23       	and	r25, r21
 b56:	11 f0       	breq	.+4      	; 0xb5c <__mulsf3+0x1c>
 b58:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 b5c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_nan>
 b60:	11 24       	eor	r1, r1
 b62:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>

00000b66 <__mulsf3x>:
 b66:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_split3>
 b6a:	70 f3       	brcs	.-36     	; 0xb48 <__mulsf3+0x8>

00000b6c <__mulsf3_pse>:
 b6c:	95 9f       	mul	r25, r21
 b6e:	c1 f3       	breq	.-16     	; 0xb60 <__mulsf3+0x20>
 b70:	95 0f       	add	r25, r21
 b72:	50 e0       	ldi	r21, 0x00	; 0
 b74:	55 1f       	adc	r21, r21
 b76:	62 9f       	mul	r22, r18
 b78:	f0 01       	movw	r30, r0
 b7a:	72 9f       	mul	r23, r18
 b7c:	bb 27       	eor	r27, r27
 b7e:	f0 0d       	add	r31, r0
 b80:	b1 1d       	adc	r27, r1
 b82:	63 9f       	mul	r22, r19
 b84:	aa 27       	eor	r26, r26
 b86:	f0 0d       	add	r31, r0
 b88:	b1 1d       	adc	r27, r1
 b8a:	aa 1f       	adc	r26, r26
 b8c:	64 9f       	mul	r22, r20
 b8e:	66 27       	eor	r22, r22
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	66 1f       	adc	r22, r22
 b96:	82 9f       	mul	r24, r18
 b98:	22 27       	eor	r18, r18
 b9a:	b0 0d       	add	r27, r0
 b9c:	a1 1d       	adc	r26, r1
 b9e:	62 1f       	adc	r22, r18
 ba0:	73 9f       	mul	r23, r19
 ba2:	b0 0d       	add	r27, r0
 ba4:	a1 1d       	adc	r26, r1
 ba6:	62 1f       	adc	r22, r18
 ba8:	83 9f       	mul	r24, r19
 baa:	a0 0d       	add	r26, r0
 bac:	61 1d       	adc	r22, r1
 bae:	22 1f       	adc	r18, r18
 bb0:	74 9f       	mul	r23, r20
 bb2:	33 27       	eor	r19, r19
 bb4:	a0 0d       	add	r26, r0
 bb6:	61 1d       	adc	r22, r1
 bb8:	23 1f       	adc	r18, r19
 bba:	84 9f       	mul	r24, r20
 bbc:	60 0d       	add	r22, r0
 bbe:	21 1d       	adc	r18, r1
 bc0:	82 2f       	mov	r24, r18
 bc2:	76 2f       	mov	r23, r22
 bc4:	6a 2f       	mov	r22, r26
 bc6:	11 24       	eor	r1, r1
 bc8:	9f 57       	subi	r25, 0x7F	; 127
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	9a f0       	brmi	.+38     	; 0xbf4 <__mulsf3_pse+0x88>
 bce:	f1 f0       	breq	.+60     	; 0xc0c <__mulsf3_pse+0xa0>
 bd0:	88 23       	and	r24, r24
 bd2:	4a f0       	brmi	.+18     	; 0xbe6 <__mulsf3_pse+0x7a>
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	bb 1f       	adc	r27, r27
 bda:	66 1f       	adc	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	a9 f7       	brne	.-22     	; 0xbd0 <__mulsf3_pse+0x64>
 be6:	9e 3f       	cpi	r25, 0xFE	; 254
 be8:	51 05       	cpc	r21, r1
 bea:	80 f0       	brcs	.+32     	; 0xc0c <__mulsf3_pse+0xa0>
 bec:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_inf>
 bf0:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_szero>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	e4 f3       	brlt	.-8      	; 0xbf0 <__mulsf3_pse+0x84>
 bf8:	98 3e       	cpi	r25, 0xE8	; 232
 bfa:	d4 f3       	brlt	.-12     	; 0xbf0 <__mulsf3_pse+0x84>
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b7 95       	ror	r27
 c04:	f7 95       	ror	r31
 c06:	e7 95       	ror	r30
 c08:	9f 5f       	subi	r25, 0xFF	; 255
 c0a:	c1 f7       	brne	.-16     	; 0xbfc <__mulsf3_pse+0x90>
 c0c:	fe 2b       	or	r31, r30
 c0e:	88 0f       	add	r24, r24
 c10:	91 1d       	adc	r25, r1
 c12:	96 95       	lsr	r25
 c14:	87 95       	ror	r24
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__fp_mpack>:
 c1a:	9f 3f       	cpi	r25, 0xFF	; 255
 c1c:	31 f0       	breq	.+12     	; 0xc2a <__fp_mpack_finite+0xc>

00000c1e <__fp_mpack_finite>:
 c1e:	91 50       	subi	r25, 0x01	; 1
 c20:	20 f4       	brcc	.+8      	; 0xc2a <__fp_mpack_finite+0xc>
 c22:	87 95       	ror	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	b7 95       	ror	r27
 c2a:	88 0f       	add	r24, r24
 c2c:	91 1d       	adc	r25, r1
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__fp_powser>:
 c36:	df 93       	push	r29
 c38:	cf 93       	push	r28
 c3a:	1f 93       	push	r17
 c3c:	0f 93       	push	r16
 c3e:	ff 92       	push	r15
 c40:	ef 92       	push	r14
 c42:	df 92       	push	r13
 c44:	7b 01       	movw	r14, r22
 c46:	8c 01       	movw	r16, r24
 c48:	68 94       	set
 c4a:	06 c0       	rjmp	.+12     	; 0xc58 <__fp_powser+0x22>
 c4c:	da 2e       	mov	r13, r26
 c4e:	ef 01       	movw	r28, r30
 c50:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3x>
 c54:	fe 01       	movw	r30, r28
 c56:	e8 94       	clt
 c58:	a5 91       	lpm	r26, Z+
 c5a:	25 91       	lpm	r18, Z+
 c5c:	35 91       	lpm	r19, Z+
 c5e:	45 91       	lpm	r20, Z+
 c60:	55 91       	lpm	r21, Z+
 c62:	a6 f3       	brts	.-24     	; 0xc4c <__fp_powser+0x16>
 c64:	ef 01       	movw	r28, r30
 c66:	0e 94 8f 03 	call	0x71e	; 0x71e <__addsf3x>
 c6a:	fe 01       	movw	r30, r28
 c6c:	97 01       	movw	r18, r14
 c6e:	a8 01       	movw	r20, r16
 c70:	da 94       	dec	r13
 c72:	69 f7       	brne	.-38     	; 0xc4e <__fp_powser+0x18>
 c74:	df 90       	pop	r13
 c76:	ef 90       	pop	r14
 c78:	ff 90       	pop	r15
 c7a:	0f 91       	pop	r16
 c7c:	1f 91       	pop	r17
 c7e:	cf 91       	pop	r28
 c80:	df 91       	pop	r29
 c82:	08 95       	ret

00000c84 <__itoa_ncheck>:
 c84:	bb 27       	eor	r27, r27
 c86:	4a 30       	cpi	r20, 0x0A	; 10
 c88:	31 f4       	brne	.+12     	; 0xc96 <__itoa_ncheck+0x12>
 c8a:	99 23       	and	r25, r25
 c8c:	22 f4       	brpl	.+8      	; 0xc96 <__itoa_ncheck+0x12>
 c8e:	bd e2       	ldi	r27, 0x2D	; 45
 c90:	90 95       	com	r25
 c92:	81 95       	neg	r24
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__utoa_common>

00000c9a <__utoa_ncheck>:
 c9a:	bb 27       	eor	r27, r27

00000c9c <__utoa_common>:
 c9c:	fb 01       	movw	r30, r22
 c9e:	55 27       	eor	r21, r21
 ca0:	aa 27       	eor	r26, r26
 ca2:	88 0f       	add	r24, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	aa 1f       	adc	r26, r26
 ca8:	a4 17       	cp	r26, r20
 caa:	10 f0       	brcs	.+4      	; 0xcb0 <__utoa_common+0x14>
 cac:	a4 1b       	sub	r26, r20
 cae:	83 95       	inc	r24
 cb0:	50 51       	subi	r21, 0x10	; 16
 cb2:	b9 f7       	brne	.-18     	; 0xca2 <__utoa_common+0x6>
 cb4:	a0 5d       	subi	r26, 0xD0	; 208
 cb6:	aa 33       	cpi	r26, 0x3A	; 58
 cb8:	08 f0       	brcs	.+2      	; 0xcbc <__utoa_common+0x20>
 cba:	a9 5d       	subi	r26, 0xD9	; 217
 cbc:	a1 93       	st	Z+, r26
 cbe:	00 97       	sbiw	r24, 0x00	; 0
 cc0:	79 f7       	brne	.-34     	; 0xca0 <__utoa_common+0x4>
 cc2:	b1 11       	cpse	r27, r1
 cc4:	b1 93       	st	Z+, r27
 cc6:	11 92       	st	Z+, r1
 cc8:	cb 01       	movw	r24, r22
 cca:	0c 94 67 06 	jmp	0xcce	; 0xcce <strrev>

00000cce <strrev>:
 cce:	dc 01       	movw	r26, r24
 cd0:	fc 01       	movw	r30, r24
 cd2:	67 2f       	mov	r22, r23
 cd4:	71 91       	ld	r23, Z+
 cd6:	77 23       	and	r23, r23
 cd8:	e1 f7       	brne	.-8      	; 0xcd2 <strrev+0x4>
 cda:	32 97       	sbiw	r30, 0x02	; 2
 cdc:	04 c0       	rjmp	.+8      	; 0xce6 <strrev+0x18>
 cde:	7c 91       	ld	r23, X
 ce0:	6d 93       	st	X+, r22
 ce2:	70 83       	st	Z, r23
 ce4:	62 91       	ld	r22, -Z
 ce6:	ae 17       	cp	r26, r30
 ce8:	bf 07       	cpc	r27, r31
 cea:	c8 f3       	brcs	.-14     	; 0xcde <strrev+0x10>
 cec:	08 95       	ret

00000cee <_exit>:
 cee:	f8 94       	cli

00000cf0 <__stop_program>:
 cf0:	ff cf       	rjmp	.-2      	; 0xcf0 <__stop_program>
