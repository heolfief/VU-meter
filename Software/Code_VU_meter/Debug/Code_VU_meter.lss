
Code_VU_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000b86  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800106  00800106  00000c20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dec  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8a  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  0000379e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000044dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000805  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001526  00000000  00000000  000051b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000066d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_18>
  4c:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_19>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_21>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__fp_round+0x16>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e6 e8       	ldi	r30, 0x86	; 134
  d6:	fb e0       	ldi	r31, 0x0B	; 11
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a6 30       	cpi	r26, 0x06	; 6
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a6 e0       	ldi	r26, 0x06	; 6
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a6 3a       	cpi	r26, 0xA6	; 166
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  f8:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <HC595Write>:
#include "headers/HC595.h"
#include "headers/Config.h"

void HC595Write(uint8_t *led_array)
{
	HC595_PORT &= ~(1<<HC595_RCK);							// Freeze output during shifting
 100:	5c 98       	cbi	0x0b, 4	; 11
	
   for(uint8_t i=sizeof(led_array)-1; i>0; --i)				// For each LED
   {
	   if(led_array[i]==0)	HC595_PORT &= ~(1<<HC595_SER);	// Send Low level signal to DS pin
 102:	fc 01       	movw	r30, r24
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	81 11       	cpse	r24, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <HC595Write+0xe>
 10a:	5f 98       	cbi	0x0b, 7	; 11
 10c:	01 c0       	rjmp	.+2      	; 0x110 <HC595Write+0x10>
	   else					HC595_PORT |=  (1<<HC595_SER);	// Send High level signal to DS pin
 10e:	5f 9a       	sbi	0x0b, 7	; 11
	   
	   HC595_PORT |= (1<<HC595_SCK);						// ...
 110:	5d 9a       	sbi	0x0b, 5	; 11
	   HC595_PORT &= ~(1<<HC595_SCK);						// ... Pulse shift clock
 112:	5d 98       	cbi	0x0b, 5	; 11
   }
   HC595_PORT |= (1<<HC595_RCK);							// Unfreeze output
 114:	5c 9a       	sbi	0x0b, 4	; 11
 116:	08 95       	ret

00000118 <main>:
#include "headers/HC595.h"
#include "headers/Config.h"

int main(void)
{
	tmr0_init();
 118:	0e 94 c1 00 	call	0x182	; 0x182 <tmr0_init>
	adc_init();
 11c:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>
	io_init();
 120:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <io_init>
	}
	
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) __attribute__((always_inline));
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) // UCSRC_reg can be used to set other than 8n1 transmission
	{
		UCSR0C_REGISTER = UCSRC_reg;
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
 130:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
 134:	88 e9       	ldi	r24, 0x98	; 152
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE);
	uart_init(BAUD_CALC(115200));
	
	sei();		// Enable interrupts
 13a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x28>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x2e>
 146:	00 00       	nop
    
	while(1)
    {
		_delay_ms(10);
		test();
 148:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <test>
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <main+0x24>

0000014e <adc_init>:
float peak_value = 0;


void adc_init()
{
	ADMUX = ADC_CHANNEL & 0b111;						// Select ADC channel
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
	ADMUX &= ~((1<<REFS1) | (1<<REFS0));				// VCC used as Voltage Reference
 154:	80 81       	ld	r24, Z
 156:	8f 73       	andi	r24, 0x3F	; 63
 158:	80 83       	st	Z, r24
	ADCSRB &= ~(1<<ADTS2);								// ...
 15a:	eb e7       	ldi	r30, 0x7B	; 123
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS1) | (1<<ADTS0);					// ... Trigger ADC on Timer0 compare match A
 164:	80 81       	ld	r24, Z
 166:	83 60       	ori	r24, 0x03	; 3
 168:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// ... ADC clock prescaler = 128
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	87 60       	ori	r24, 0x07	; 7
 172:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE) | (1<<ADEN) | (1<<ADATE);		// Enable ADC and enable interrupt and enable auto-trigger
 174:	80 81       	ld	r24, Z
 176:	88 6a       	ori	r24, 0xA8	; 168
 178:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);								// Start ADC conversion
 17a:	80 81       	ld	r24, Z
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <tmr0_init>:
}

void tmr0_init()
{
	TCNT0=0;											// Reset timer
 182:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01);								// CTC mode (clear timer on compare match)
 184:	84 b5       	in	r24, 0x24	; 36
 186:	82 60       	ori	r24, 0x02	; 2
 188:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~((1<<COM0A1) | (1<<COM0A0));
 18a:	84 b5       	in	r24, 0x24	; 36
 18c:	8f 73       	andi	r24, 0x3F	; 63
 18e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<CS02);								// ... 
 190:	85 b5       	in	r24, 0x25	; 37
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	85 bd       	out	0x25, r24	; 37
	TCCR0B = (1<<CS01)|(1<<CS00);						// ... Timer0 clock prescaler = 64
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;										// compare match every 250 * 1 / (16 000 000 / 64) = 1 ms
 19a:	8a ef       	ldi	r24, 0xFA	; 250
 19c:	87 bd       	out	0x27, r24	; 39
 19e:	08 95       	ret

000001a0 <io_init>:
}

void io_init()
{
 1a0:	08 95       	ret

000001a2 <test>:
	//PORTD = 0xFF;
}

void test()
{
	uart_puts("$");
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <uart0_putstr>
	uart_putint(20*log10(adc_avg+1)*NUMBER_OF_LED/60.2);
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e8       	ldi	r20, 0x80	; 128
 1b0:	5f e3       	ldi	r21, 0x3F	; 63
 1b2:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <adc_avg>
 1b6:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <adc_avg+0x1>
 1ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_avg+0x2>
 1be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_avg+0x3>
 1c2:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 1c6:	0e 94 92 04 	call	0x924	; 0x924 <log10>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 ea       	ldi	r20, 0xA0	; 160
 1d0:	51 e4       	ldi	r21, 0x41	; 65
 1d2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 ea       	ldi	r20, 0xA0	; 160
 1dc:	52 e4       	ldi	r21, 0x42	; 66
 1de:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 1e2:	2d ec       	ldi	r18, 0xCD	; 205
 1e4:	3c ec       	ldi	r19, 0xCC	; 204
 1e6:	40 e7       	ldi	r20, 0x70	; 112
 1e8:	52 e4       	ldi	r21, 0x42	; 66
 1ea:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 1ee:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixsfsi>
 1f2:	cb 01       	movw	r24, r22
 1f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <uart0_putint>
	uart_puts(" ");
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <uart0_putstr>
	uart_putint(peak_value);
 200:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 204:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 208:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 20c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 210:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixsfsi>
 214:	cb 01       	movw	r24, r22
 216:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <uart0_putint>
	uart_puts(";");
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <uart0_putstr>
 222:	08 95       	ret

00000224 <__vector_21>:
}

ISR(ADC_vect)											// Interrupt on ADC conversion complete
{	
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	4f 92       	push	r4
 230:	5f 92       	push	r5
 232:	6f 92       	push	r6
 234:	7f 92       	push	r7
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	TIFR0=(1<<OCF0A);									// Disable tmr0 comp match a interrupt
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	85 bb       	out	0x15, r24	; 21
		
	adc_avg += (((float)ADC - adc_avg) / AVERAGEWIDTH);	// Pseudo running average
 26a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 26e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 272:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <adc_avg>
 276:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <adc_avg+0x1>
 27a:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <adc_avg+0x2>
 27e:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <adc_avg+0x3>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__floatunsisf>
 28a:	a7 01       	movw	r20, r14
 28c:	96 01       	movw	r18, r12
 28e:	0e 94 c1 02 	call	0x582	; 0x582 <__subsf3>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e8       	ldi	r20, 0x80	; 128
 298:	5e e3       	ldi	r21, 0x3E	; 62
 29a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 2a6:	4b 01       	movw	r8, r22
 2a8:	5c 01       	movw	r10, r24
 2aa:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adc_avg>
 2ae:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <adc_avg+0x1>
 2b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_avg+0x2>
 2b6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adc_avg+0x3>
	
	float vu_value = 20*log10(adc_avg+1)*NUMBER_OF_LED/60.2; // 60.2=20*Log10(1024)
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e8       	ldi	r20, 0x80	; 128
 2c0:	5f e3       	ldi	r21, 0x3F	; 63
 2c2:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 2c6:	0e 94 92 04 	call	0x924	; 0x924 <log10>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 ea       	ldi	r20, 0xA0	; 160
 2d0:	51 e4       	ldi	r21, 0x41	; 65
 2d2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 ea       	ldi	r20, 0xA0	; 160
 2dc:	52 e4       	ldi	r21, 0x42	; 66
 2de:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 2e2:	2d ec       	ldi	r18, 0xCD	; 205
 2e4:	3c ec       	ldi	r19, 0xCC	; 204
 2e6:	40 e7       	ldi	r20, 0x70	; 112
 2e8:	52 e4       	ldi	r21, 0x42	; 66
 2ea:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 2ee:	6b 01       	movw	r12, r22
 2f0:	7c 01       	movw	r14, r24
	
	if ((peak_ht_cnt*9.948) > PEAK_HOLD_TIME)			// If peak hold time is reached
 2f2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <peak_ht_cnt>
 2f6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <peak_ht_cnt+0x1>
 2fa:	07 2e       	mov	r0, r23
 2fc:	00 0c       	add	r0, r0
 2fe:	88 0b       	sbc	r24, r24
 300:	99 0b       	sbc	r25, r25
 302:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__floatsisf>
 306:	22 e0       	ldi	r18, 0x02	; 2
 308:	3b e2       	ldi	r19, 0x2B	; 43
 30a:	4f e1       	ldi	r20, 0x1F	; 31
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	46 e1       	ldi	r20, 0x16	; 22
 318:	54 e4       	ldi	r21, 0x44	; 68
 31a:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 31e:	18 16       	cp	r1, r24
 320:	5c f5       	brge	.+86     	; 0x378 <__vector_21+0x154>
	{
		if (peak_value < PEAK_FALL_RATE) peak_value = 0;// decrease peak value only if it will stay higher than 0
 322:	40 90 06 01 	lds	r4, 0x0106	; 0x800106 <__data_end>
 326:	50 90 07 01 	lds	r5, 0x0107	; 0x800107 <__data_end+0x1>
 32a:	60 90 08 01 	lds	r6, 0x0108	; 0x800108 <__data_end+0x2>
 32e:	70 90 09 01 	lds	r7, 0x0109	; 0x800109 <__data_end+0x3>
 332:	2d ec       	ldi	r18, 0xCD	; 205
 334:	3c ec       	ldi	r19, 0xCC	; 204
 336:	4c e4       	ldi	r20, 0x4C	; 76
 338:	5e e3       	ldi	r21, 0x3E	; 62
 33a:	c3 01       	movw	r24, r6
 33c:	b2 01       	movw	r22, r4
 33e:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 342:	88 23       	and	r24, r24
 344:	4c f4       	brge	.+18     	; 0x358 <__vector_21+0x134>
 346:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 34a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 34e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end+0x2>
 352:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x3>
 356:	10 c0       	rjmp	.+32     	; 0x378 <__vector_21+0x154>
		else peak_value -= PEAK_FALL_RATE;
 358:	2d ec       	ldi	r18, 0xCD	; 205
 35a:	3c ec       	ldi	r19, 0xCC	; 204
 35c:	4c e4       	ldi	r20, 0x4C	; 76
 35e:	5e e3       	ldi	r21, 0x3E	; 62
 360:	c3 01       	movw	r24, r6
 362:	b2 01       	movw	r22, r4
 364:	0e 94 c1 02 	call	0x582	; 0x582 <__subsf3>
 368:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 36c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 370:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 374:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
	}
	if (vu_value > peak_value)							// If a peak higher than the previous is detected
 378:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 37c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 380:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end+0x2>
 384:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__data_end+0x3>
 388:	c7 01       	movw	r24, r14
 38a:	b6 01       	movw	r22, r12
 38c:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	64 f4       	brge	.+24     	; 0x3ac <__vector_21+0x188>
	{
		peak_value = vu_value;							// Store the peak
 394:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <__data_end>
 398:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <__data_end+0x1>
 39c:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <__data_end+0x2>
 3a0:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <__data_end+0x3>
		peak_ht_cnt = 0;								// start the peak hold counter
 3a4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <peak_ht_cnt+0x1>
 3a8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <peak_ht_cnt>
	}
	peak_ht_cnt ++;										// Increase the peak hold counter
 3ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <peak_ht_cnt>
 3b0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <peak_ht_cnt+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <peak_ht_cnt+0x1>
 3ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <peak_ht_cnt>
	
	for (uint8_t i=0; i<vu_value; ++i) led_array[i]=1;	// Fill bottom part of led_array with 1
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	a9 01       	movw	r20, r18
 3c4:	c7 01       	movw	r24, r14
 3c6:	b6 01       	movw	r22, r12
 3c8:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 3cc:	18 16       	cp	r1, r24
 3ce:	cc f4       	brge	.+50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	01 e0       	ldi	r16, 0x01	; 1
 3d8:	ce 5e       	subi	r28, 0xEE	; 238
 3da:	de 4f       	sbci	r29, 0xFE	; 254
 3dc:	08 83       	st	Y, r16
 3de:	1f 5f       	subi	r17, 0xFF	; 255
 3e0:	c1 2f       	mov	r28, r17
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	be 01       	movw	r22, r28
 3e6:	0d 2e       	mov	r0, r29
 3e8:	00 0c       	add	r0, r0
 3ea:	88 0b       	sbc	r24, r24
 3ec:	99 0b       	sbc	r25, r25
 3ee:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__floatsisf>
 3f2:	9b 01       	movw	r18, r22
 3f4:	ac 01       	movw	r20, r24
 3f6:	c7 01       	movw	r24, r14
 3f8:	b6 01       	movw	r22, r12
 3fa:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 3fe:	18 16       	cp	r1, r24
 400:	5c f3       	brlt	.-42     	; 0x3d8 <__vector_21+0x1b4>
	for (uint8_t i=adc_avg; i<sizeof(led_array); ++i) led_array[i]=0;	// Fill top part of led_array with 0
 402:	c5 01       	movw	r24, r10
 404:	b4 01       	movw	r22, r8
 406:	0e 94 ac 03 	call	0x758	; 0x758 <__fixunssfsi>
 40a:	60 35       	cpi	r22, 0x50	; 80
 40c:	40 f4       	brcc	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40e:	e6 2f       	mov	r30, r22
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ee 5e       	subi	r30, 0xEE	; 238
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	10 82       	st	Z, r1
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	60 35       	cpi	r22, 0x50	; 80
 41c:	c1 f7       	brne	.-16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	
	led_array[(int)peak_value]=1;	// light peak led
 41e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 422:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 426:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 42a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 42e:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixsfsi>
 432:	fb 01       	movw	r30, r22
 434:	ee 5e       	subi	r30, 0xEE	; 238
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 83       	st	Z, r24
	
	HC595Write(led_array);								// Light up LEDs
 43c:	82 e1       	ldi	r24, 0x12	; 18
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 80 00 	call	0x100	; 0x100 <HC595Write>
}
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	9f 90       	pop	r9
 472:	8f 90       	pop	r8
 474:	7f 90       	pop	r7
 476:	6f 90       	pop	r6
 478:	5f 90       	pop	r5
 47a:	4f 90       	pop	r4
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <uart0_putc>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
 486:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <tx0_Head>
 48a:	9f 5f       	subi	r25, 0xFF	; 255
 48c:	9f 71       	andi	r25, 0x1F	; 31
 48e:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <tx0_Tail>
 492:	92 17       	cp	r25, r18
 494:	e1 f3       	breq	.-8      	; 0x48e <uart0_putc+0x8>
 496:	e9 2f       	mov	r30, r25
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	ea 57       	subi	r30, 0x7A	; 122
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	80 83       	st	Z, r24
 4a0:	2f b7       	in	r18, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <tx0_Head>
 4a8:	e1 ec       	ldi	r30, 0xC1	; 193
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	80 83       	st	Z, r24
 4b2:	2f bf       	out	0x3f, r18	; 63
 4b4:	08 95       	ret

000004b6 <uart0_putstr>:
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	fc 01       	movw	r30, r24
 4c0:	80 81       	ld	r24, Z
 4c2:	88 23       	and	r24, r24
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <uart0_putstr+0x1a>
 4c6:	0e 94 43 02 	call	0x486	; 0x486 <uart0_putc>
 4ca:	89 91       	ld	r24, Y+
 4cc:	81 11       	cpse	r24, r1
 4ce:	fb cf       	rjmp	.-10     	; 0x4c6 <uart0_putstr+0x10>
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <uart0_putint>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	27 97       	sbiw	r28, 0x07	; 7
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	4a e0       	ldi	r20, 0x0A	; 10
 4ec:	be 01       	movw	r22, r28
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__itoa_ncheck>
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <uart0_putstr>
 4fe:	27 96       	adiw	r28, 0x07	; 7
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 510:	0f 93       	push	r16
 512:	0f b7       	in	r16, 0x3f	; 63
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
 518:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <tx0_Tail>
 51c:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <tx0_Head>
 520:	e3 95       	inc	r30
 522:	ef 71       	andi	r30, 0x1F	; 31
 524:	ef 13       	cpse	r30, r31
 526:	05 c0       	rjmp	.+10     	; 0x532 <USART0_TX_CONTINUE>
 528:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 52c:	ff 7d       	andi	r31, 0xDF	; 223
 52e:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000532 <USART0_TX_CONTINUE>:
 532:	e0 93 82 01 	sts	0x0182, r30	; 0x800182 <tx0_Tail>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	ea 57       	subi	r30, 0x7A	; 122
 53a:	fe 4f       	sbci	r31, 0xFE	; 254
 53c:	e0 81       	ld	r30, Z
 53e:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000542 <USART0_TX_EXIT>:
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	0f bf       	out	0x3f, r16	; 63
 548:	0f 91       	pop	r16
 54a:	18 95       	reti

0000054c <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
 54c:	0f 93       	push	r16
 54e:	0f b7       	in	r16, 0x3f	; 63
 550:	9f 93       	push	r25
 552:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
 55a:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <rx0_Head>
 55e:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <rx0_Tail>
 562:	e3 95       	inc	r30
 564:	ef 71       	andi	r30, 0x1F	; 31
 566:	fe 17       	cp	r31, r30
 568:	31 f0       	breq	.+12     	; 0x576 <USART0_RX_EXIT>
 56a:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <rx0_Head>
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	ee 59       	subi	r30, 0x9E	; 158
 572:	fe 4f       	sbci	r31, 0xFE	; 254
 574:	90 83       	st	Z, r25

00000576 <USART0_RX_EXIT>:
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	9f 91       	pop	r25
 57c:	0f bf       	out	0x3f, r16	; 63
 57e:	0f 91       	pop	r16
 580:	18 95       	reti

00000582 <__subsf3>:
 582:	50 58       	subi	r21, 0x80	; 128

00000584 <__addsf3>:
 584:	bb 27       	eor	r27, r27
 586:	aa 27       	eor	r26, r26
 588:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__addsf3x>
 58c:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 590:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 594:	38 f0       	brcs	.+14     	; 0x5a4 <__addsf3+0x20>
 596:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3+0x20>
 59c:	39 f4       	brne	.+14     	; 0x5ac <__addsf3+0x28>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	19 f4       	brne	.+6      	; 0x5a8 <__addsf3+0x24>
 5a2:	26 f4       	brtc	.+8      	; 0x5ac <__addsf3+0x28>
 5a4:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>
 5a8:	0e f4       	brtc	.+2      	; 0x5ac <__addsf3+0x28>
 5aa:	e0 95       	com	r30
 5ac:	e7 fb       	bst	r30, 7
 5ae:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>

000005b2 <__addsf3x>:
 5b2:	e9 2f       	mov	r30, r25
 5b4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 5b8:	58 f3       	brcs	.-42     	; 0x590 <__addsf3+0xc>
 5ba:	ba 17       	cp	r27, r26
 5bc:	62 07       	cpc	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	95 07       	cpc	r25, r21
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__addsf3x+0x1c>
 5c6:	79 f4       	brne	.+30     	; 0x5e6 <__addsf3x+0x34>
 5c8:	a6 f5       	brtc	.+104    	; 0x632 <__addsf3x+0x80>
 5ca:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_zero>
 5ce:	0e f4       	brtc	.+2      	; 0x5d2 <__addsf3x+0x20>
 5d0:	e0 95       	com	r30
 5d2:	0b 2e       	mov	r0, r27
 5d4:	ba 2f       	mov	r27, r26
 5d6:	a0 2d       	mov	r26, r0
 5d8:	0b 01       	movw	r0, r22
 5da:	b9 01       	movw	r22, r18
 5dc:	90 01       	movw	r18, r0
 5de:	0c 01       	movw	r0, r24
 5e0:	ca 01       	movw	r24, r20
 5e2:	a0 01       	movw	r20, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	ff 27       	eor	r31, r31
 5e8:	59 1b       	sub	r21, r25
 5ea:	99 f0       	breq	.+38     	; 0x612 <__addsf3x+0x60>
 5ec:	59 3f       	cpi	r21, 0xF9	; 249
 5ee:	50 f4       	brcc	.+20     	; 0x604 <__addsf3x+0x52>
 5f0:	50 3e       	cpi	r21, 0xE0	; 224
 5f2:	68 f1       	brcs	.+90     	; 0x64e <__addsf3x+0x9c>
 5f4:	1a 16       	cp	r1, r26
 5f6:	f0 40       	sbci	r31, 0x00	; 0
 5f8:	a2 2f       	mov	r26, r18
 5fa:	23 2f       	mov	r18, r19
 5fc:	34 2f       	mov	r19, r20
 5fe:	44 27       	eor	r20, r20
 600:	58 5f       	subi	r21, 0xF8	; 248
 602:	f3 cf       	rjmp	.-26     	; 0x5ea <__addsf3x+0x38>
 604:	46 95       	lsr	r20
 606:	37 95       	ror	r19
 608:	27 95       	ror	r18
 60a:	a7 95       	ror	r26
 60c:	f0 40       	sbci	r31, 0x00	; 0
 60e:	53 95       	inc	r21
 610:	c9 f7       	brne	.-14     	; 0x604 <__addsf3x+0x52>
 612:	7e f4       	brtc	.+30     	; 0x632 <__addsf3x+0x80>
 614:	1f 16       	cp	r1, r31
 616:	ba 0b       	sbc	r27, r26
 618:	62 0b       	sbc	r22, r18
 61a:	73 0b       	sbc	r23, r19
 61c:	84 0b       	sbc	r24, r20
 61e:	ba f0       	brmi	.+46     	; 0x64e <__addsf3x+0x9c>
 620:	91 50       	subi	r25, 0x01	; 1
 622:	a1 f0       	breq	.+40     	; 0x64c <__addsf3x+0x9a>
 624:	ff 0f       	add	r31, r31
 626:	bb 1f       	adc	r27, r27
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	c2 f7       	brpl	.-16     	; 0x620 <__addsf3x+0x6e>
 630:	0e c0       	rjmp	.+28     	; 0x64e <__addsf3x+0x9c>
 632:	ba 0f       	add	r27, r26
 634:	62 1f       	adc	r22, r18
 636:	73 1f       	adc	r23, r19
 638:	84 1f       	adc	r24, r20
 63a:	48 f4       	brcc	.+18     	; 0x64e <__addsf3x+0x9c>
 63c:	87 95       	ror	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	9e 3f       	cpi	r25, 0xFE	; 254
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x9a>
 64a:	b0 cf       	rjmp	.-160    	; 0x5ac <__addsf3+0x28>
 64c:	93 95       	inc	r25
 64e:	88 0f       	add	r24, r24
 650:	08 f0       	brcs	.+2      	; 0x654 <__addsf3x+0xa2>
 652:	99 27       	eor	r25, r25
 654:	ee 0f       	add	r30, r30
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	08 95       	ret

0000065c <__cmpsf2>:
 65c:	0e 94 18 04 	call	0x830	; 0x830 <__fp_cmp>
 660:	08 f4       	brcc	.+2      	; 0x664 <__cmpsf2+0x8>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret

00000666 <__divsf3>:
 666:	0e 94 47 03 	call	0x68e	; 0x68e <__divsf3x>
 66a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 66e:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 672:	58 f0       	brcs	.+22     	; 0x68a <__divsf3+0x24>
 674:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 678:	40 f0       	brcs	.+16     	; 0x68a <__divsf3+0x24>
 67a:	29 f4       	brne	.+10     	; 0x686 <__divsf3+0x20>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	29 f0       	breq	.+10     	; 0x68a <__divsf3+0x24>
 680:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 684:	51 11       	cpse	r21, r1
 686:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 68a:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>

0000068e <__divsf3x>:
 68e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 692:	68 f3       	brcs	.-38     	; 0x66e <__divsf3+0x8>

00000694 <__divsf3_pse>:
 694:	99 23       	and	r25, r25
 696:	b1 f3       	breq	.-20     	; 0x684 <__divsf3+0x1e>
 698:	55 23       	and	r21, r21
 69a:	91 f3       	breq	.-28     	; 0x680 <__divsf3+0x1a>
 69c:	95 1b       	sub	r25, r21
 69e:	55 0b       	sbc	r21, r21
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	62 17       	cp	r22, r18
 6a6:	73 07       	cpc	r23, r19
 6a8:	84 07       	cpc	r24, r20
 6aa:	38 f0       	brcs	.+14     	; 0x6ba <__divsf3_pse+0x26>
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	44 1f       	adc	r20, r20
 6b6:	aa 1f       	adc	r26, r26
 6b8:	a9 f3       	breq	.-22     	; 0x6a4 <__divsf3_pse+0x10>
 6ba:	35 d0       	rcall	.+106    	; 0x726 <__divsf3_pse+0x92>
 6bc:	0e 2e       	mov	r0, r30
 6be:	3a f0       	brmi	.+14     	; 0x6ce <__divsf3_pse+0x3a>
 6c0:	e0 e8       	ldi	r30, 0x80	; 128
 6c2:	32 d0       	rcall	.+100    	; 0x728 <__divsf3_pse+0x94>
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	e6 95       	lsr	r30
 6ca:	00 1c       	adc	r0, r0
 6cc:	ca f7       	brpl	.-14     	; 0x6c0 <__divsf3_pse+0x2c>
 6ce:	2b d0       	rcall	.+86     	; 0x726 <__divsf3_pse+0x92>
 6d0:	fe 2f       	mov	r31, r30
 6d2:	29 d0       	rcall	.+82     	; 0x726 <__divsf3_pse+0x92>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	26 17       	cp	r18, r22
 6de:	37 07       	cpc	r19, r23
 6e0:	48 07       	cpc	r20, r24
 6e2:	ab 07       	cpc	r26, r27
 6e4:	b0 e8       	ldi	r27, 0x80	; 128
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__divsf3_pse+0x56>
 6e8:	bb 0b       	sbc	r27, r27
 6ea:	80 2d       	mov	r24, r0
 6ec:	bf 01       	movw	r22, r30
 6ee:	ff 27       	eor	r31, r31
 6f0:	93 58       	subi	r25, 0x83	; 131
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	3a f0       	brmi	.+14     	; 0x704 <__divsf3_pse+0x70>
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	51 05       	cpc	r21, r1
 6fa:	78 f0       	brcs	.+30     	; 0x71a <__divsf3_pse+0x86>
 6fc:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 700:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	e4 f3       	brlt	.-8      	; 0x700 <__divsf3_pse+0x6c>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	d4 f3       	brlt	.-12     	; 0x700 <__divsf3_pse+0x6c>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c9 f7       	brne	.-14     	; 0x70c <__divsf3_pse+0x78>
 71a:	88 0f       	add	r24, r24
 71c:	91 1d       	adc	r25, r1
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	62 17       	cp	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	ba 07       	cpc	r27, r26
 738:	20 f0       	brcs	.+8      	; 0x742 <__divsf3_pse+0xae>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	ba 0b       	sbc	r27, r26
 742:	ee 1f       	adc	r30, r30
 744:	88 f7       	brcc	.-30     	; 0x728 <__divsf3_pse+0x94>
 746:	e0 95       	com	r30
 748:	08 95       	ret

0000074a <__fixsfsi>:
 74a:	0e 94 ac 03 	call	0x758	; 0x758 <__fixunssfsi>
 74e:	68 94       	set
 750:	b1 11       	cpse	r27, r1
 752:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 756:	08 95       	ret

00000758 <__fixunssfsi>:
 758:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_splitA>
 75c:	88 f0       	brcs	.+34     	; 0x780 <__fixunssfsi+0x28>
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	98 f0       	brcs	.+38     	; 0x788 <__fixunssfsi+0x30>
 762:	b9 2f       	mov	r27, r25
 764:	99 27       	eor	r25, r25
 766:	b7 51       	subi	r27, 0x17	; 23
 768:	b0 f0       	brcs	.+44     	; 0x796 <__fixunssfsi+0x3e>
 76a:	e1 f0       	breq	.+56     	; 0x7a4 <__fixunssfsi+0x4c>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	1a f0       	brmi	.+6      	; 0x77c <__fixunssfsi+0x24>
 776:	ba 95       	dec	r27
 778:	c9 f7       	brne	.-14     	; 0x76c <__fixunssfsi+0x14>
 77a:	14 c0       	rjmp	.+40     	; 0x7a4 <__fixunssfsi+0x4c>
 77c:	b1 30       	cpi	r27, 0x01	; 1
 77e:	91 f0       	breq	.+36     	; 0x7a4 <__fixunssfsi+0x4c>
 780:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_zero>
 784:	b1 e0       	ldi	r27, 0x01	; 1
 786:	08 95       	ret
 788:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_zero>
 78c:	67 2f       	mov	r22, r23
 78e:	78 2f       	mov	r23, r24
 790:	88 27       	eor	r24, r24
 792:	b8 5f       	subi	r27, 0xF8	; 248
 794:	39 f0       	breq	.+14     	; 0x7a4 <__fixunssfsi+0x4c>
 796:	b9 3f       	cpi	r27, 0xF9	; 249
 798:	cc f3       	brlt	.-14     	; 0x78c <__fixunssfsi+0x34>
 79a:	86 95       	lsr	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	b3 95       	inc	r27
 7a2:	d9 f7       	brne	.-10     	; 0x79a <__fixunssfsi+0x42>
 7a4:	3e f4       	brtc	.+14     	; 0x7b4 <__fixunssfsi+0x5c>
 7a6:	90 95       	com	r25
 7a8:	80 95       	com	r24
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	08 95       	ret

000007b6 <__floatunsisf>:
 7b6:	e8 94       	clt
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <__floatsisf+0x12>

000007ba <__floatsisf>:
 7ba:	97 fb       	bst	r25, 7
 7bc:	3e f4       	brtc	.+14     	; 0x7cc <__floatsisf+0x12>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	99 23       	and	r25, r25
 7ce:	a9 f0       	breq	.+42     	; 0x7fa <__floatsisf+0x40>
 7d0:	f9 2f       	mov	r31, r25
 7d2:	96 e9       	ldi	r25, 0x96	; 150
 7d4:	bb 27       	eor	r27, r27
 7d6:	93 95       	inc	r25
 7d8:	f6 95       	lsr	r31
 7da:	87 95       	ror	r24
 7dc:	77 95       	ror	r23
 7de:	67 95       	ror	r22
 7e0:	b7 95       	ror	r27
 7e2:	f1 11       	cpse	r31, r1
 7e4:	f8 cf       	rjmp	.-16     	; 0x7d6 <__floatsisf+0x1c>
 7e6:	fa f4       	brpl	.+62     	; 0x826 <__floatsisf+0x6c>
 7e8:	bb 0f       	add	r27, r27
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <__floatsisf+0x36>
 7ec:	60 ff       	sbrs	r22, 0
 7ee:	1b c0       	rjmp	.+54     	; 0x826 <__floatsisf+0x6c>
 7f0:	6f 5f       	subi	r22, 0xFF	; 255
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	16 c0       	rjmp	.+44     	; 0x826 <__floatsisf+0x6c>
 7fa:	88 23       	and	r24, r24
 7fc:	11 f0       	breq	.+4      	; 0x802 <__floatsisf+0x48>
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	11 c0       	rjmp	.+34     	; 0x824 <__floatsisf+0x6a>
 802:	77 23       	and	r23, r23
 804:	21 f0       	breq	.+8      	; 0x80e <__floatsisf+0x54>
 806:	9e e8       	ldi	r25, 0x8E	; 142
 808:	87 2f       	mov	r24, r23
 80a:	76 2f       	mov	r23, r22
 80c:	05 c0       	rjmp	.+10     	; 0x818 <__floatsisf+0x5e>
 80e:	66 23       	and	r22, r22
 810:	71 f0       	breq	.+28     	; 0x82e <__floatsisf+0x74>
 812:	96 e8       	ldi	r25, 0x86	; 134
 814:	86 2f       	mov	r24, r22
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	2a f0       	brmi	.+10     	; 0x826 <__floatsisf+0x6c>
 81c:	9a 95       	dec	r25
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	da f7       	brpl	.-10     	; 0x81c <__floatsisf+0x62>
 826:	88 0f       	add	r24, r24
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <__fp_cmp>:
 830:	99 0f       	add	r25, r25
 832:	00 08       	sbc	r0, r0
 834:	55 0f       	add	r21, r21
 836:	aa 0b       	sbc	r26, r26
 838:	e0 e8       	ldi	r30, 0x80	; 128
 83a:	fe ef       	ldi	r31, 0xFE	; 254
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	e8 07       	cpc	r30, r24
 842:	f9 07       	cpc	r31, r25
 844:	c0 f0       	brcs	.+48     	; 0x876 <__fp_cmp+0x46>
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	e4 07       	cpc	r30, r20
 84c:	f5 07       	cpc	r31, r21
 84e:	98 f0       	brcs	.+38     	; 0x876 <__fp_cmp+0x46>
 850:	62 1b       	sub	r22, r18
 852:	73 0b       	sbc	r23, r19
 854:	84 0b       	sbc	r24, r20
 856:	95 0b       	sbc	r25, r21
 858:	39 f4       	brne	.+14     	; 0x868 <__fp_cmp+0x38>
 85a:	0a 26       	eor	r0, r26
 85c:	61 f0       	breq	.+24     	; 0x876 <__fp_cmp+0x46>
 85e:	23 2b       	or	r18, r19
 860:	24 2b       	or	r18, r20
 862:	25 2b       	or	r18, r21
 864:	21 f4       	brne	.+8      	; 0x86e <__fp_cmp+0x3e>
 866:	08 95       	ret
 868:	0a 26       	eor	r0, r26
 86a:	09 f4       	brne	.+2      	; 0x86e <__fp_cmp+0x3e>
 86c:	a1 40       	sbci	r26, 0x01	; 1
 86e:	a6 95       	lsr	r26
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	81 1d       	adc	r24, r1
 874:	81 1d       	adc	r24, r1
 876:	08 95       	ret

00000878 <__fp_inf>:
 878:	97 f9       	bld	r25, 7
 87a:	9f 67       	ori	r25, 0x7F	; 127
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	08 95       	ret

00000884 <__fp_nan>:
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	80 ec       	ldi	r24, 0xC0	; 192
 888:	08 95       	ret

0000088a <__fp_pscA>:
 88a:	00 24       	eor	r0, r0
 88c:	0a 94       	dec	r0
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	18 06       	cpc	r1, r24
 894:	09 06       	cpc	r0, r25
 896:	08 95       	ret

00000898 <__fp_pscB>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	05 06       	cpc	r0, r21
 8a4:	08 95       	ret

000008a6 <__fp_round>:
 8a6:	09 2e       	mov	r0, r25
 8a8:	03 94       	inc	r0
 8aa:	00 0c       	add	r0, r0
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_round+0xc>
 8ae:	88 23       	and	r24, r24
 8b0:	52 f0       	brmi	.+20     	; 0x8c6 <__fp_round+0x20>
 8b2:	bb 0f       	add	r27, r27
 8b4:	40 f4       	brcc	.+16     	; 0x8c6 <__fp_round+0x20>
 8b6:	bf 2b       	or	r27, r31
 8b8:	11 f4       	brne	.+4      	; 0x8be <__fp_round+0x18>
 8ba:	60 ff       	sbrs	r22, 0
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__fp_round+0x20>
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__fp_split3>:
 8c8:	57 fd       	sbrc	r21, 7
 8ca:	90 58       	subi	r25, 0x80	; 128
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <__fp_splitA+0x10>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__fp_splitA+0x1a>
 8d6:	47 95       	ror	r20

000008d8 <__fp_splitA>:
 8d8:	88 0f       	add	r24, r24
 8da:	97 fb       	bst	r25, 7
 8dc:	99 1f       	adc	r25, r25
 8de:	61 f0       	breq	.+24     	; 0x8f8 <__fp_splitA+0x20>
 8e0:	9f 3f       	cpi	r25, 0xFF	; 255
 8e2:	79 f0       	breq	.+30     	; 0x902 <__stack+0x3>
 8e4:	87 95       	ror	r24
 8e6:	08 95       	ret
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	14 06       	cpc	r1, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	f2 cf       	rjmp	.-28     	; 0x8d6 <__fp_split3+0xe>
 8f2:	46 95       	lsr	r20
 8f4:	f1 df       	rcall	.-30     	; 0x8d8 <__fp_splitA>
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__stack+0x9>
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	18 06       	cpc	r1, r24
 8fe:	99 1f       	adc	r25, r25
 900:	f1 cf       	rjmp	.-30     	; 0x8e4 <__fp_splitA+0xc>
 902:	86 95       	lsr	r24
 904:	71 05       	cpc	r23, r1
 906:	61 05       	cpc	r22, r1
 908:	08 94       	sec
 90a:	08 95       	ret

0000090c <__fp_zero>:
 90c:	e8 94       	clt

0000090e <__fp_szero>:
 90e:	bb 27       	eor	r27, r27
 910:	66 27       	eor	r22, r22
 912:	77 27       	eor	r23, r23
 914:	cb 01       	movw	r24, r22
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <__gesf2>:
 91a:	0e 94 18 04 	call	0x830	; 0x830 <__fp_cmp>
 91e:	08 f4       	brcc	.+2      	; 0x922 <__gesf2+0x8>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	08 95       	ret

00000924 <log10>:
 924:	0e 94 a2 04 	call	0x944	; 0x944 <log>
 928:	29 ed       	ldi	r18, 0xD9	; 217
 92a:	3b e5       	ldi	r19, 0x5B	; 91
 92c:	4e ed       	ldi	r20, 0xDE	; 222
 92e:	5e e3       	ldi	r21, 0x3E	; 62
 930:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__mulsf3>
 934:	16 f0       	brts	.+4      	; 0x93a <log10+0x16>
 936:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_mpack>
 93a:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>
 93e:	68 94       	set
 940:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>

00000944 <log>:
 944:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_splitA>
 948:	a8 f3       	brcs	.-22     	; 0x934 <log10+0x10>
 94a:	99 23       	and	r25, r25
 94c:	c1 f3       	breq	.-16     	; 0x93e <log10+0x1a>
 94e:	ae f3       	brts	.-22     	; 0x93a <log10+0x16>
 950:	df 93       	push	r29
 952:	cf 93       	push	r28
 954:	1f 93       	push	r17
 956:	0f 93       	push	r16
 958:	ff 92       	push	r15
 95a:	c9 2f       	mov	r28, r25
 95c:	dd 27       	eor	r29, r29
 95e:	88 23       	and	r24, r24
 960:	2a f0       	brmi	.+10     	; 0x96c <log+0x28>
 962:	21 97       	sbiw	r28, 0x01	; 1
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	da f7       	brpl	.-10     	; 0x962 <log+0x1e>
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	40 e8       	ldi	r20, 0x80	; 128
 972:	5f eb       	ldi	r21, 0xBF	; 191
 974:	9f e3       	ldi	r25, 0x3F	; 63
 976:	88 39       	cpi	r24, 0x98	; 152
 978:	20 f0       	brcs	.+8      	; 0x982 <log+0x3e>
 97a:	80 3e       	cpi	r24, 0xE0	; 224
 97c:	38 f0       	brcs	.+14     	; 0x98c <log+0x48>
 97e:	21 96       	adiw	r28, 0x01	; 1
 980:	8f 77       	andi	r24, 0x7F	; 127
 982:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 986:	e8 e6       	ldi	r30, 0x68	; 104
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	04 c0       	rjmp	.+8      	; 0x994 <log+0x50>
 98c:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 990:	e5 e9       	ldi	r30, 0x95	; 149
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_powser>
 998:	8b 01       	movw	r16, r22
 99a:	be 01       	movw	r22, r28
 99c:	ec 01       	movw	r28, r24
 99e:	fb 2e       	mov	r15, r27
 9a0:	6f 57       	subi	r22, 0x7F	; 127
 9a2:	71 09       	sbc	r23, r1
 9a4:	75 95       	asr	r23
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 0b       	sbc	r24, r24
 9aa:	99 0b       	sbc	r25, r25
 9ac:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__floatsisf>
 9b0:	28 e1       	ldi	r18, 0x18	; 24
 9b2:	32 e7       	ldi	r19, 0x72	; 114
 9b4:	41 e3       	ldi	r20, 0x31	; 49
 9b6:	5f e3       	ldi	r21, 0x3F	; 63
 9b8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3x>
 9bc:	af 2d       	mov	r26, r15
 9be:	98 01       	movw	r18, r16
 9c0:	ae 01       	movw	r20, r28
 9c2:	ff 90       	pop	r15
 9c4:	0f 91       	pop	r16
 9c6:	1f 91       	pop	r17
 9c8:	cf 91       	pop	r28
 9ca:	df 91       	pop	r29
 9cc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__addsf3x>
 9d0:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>

000009d4 <__mulsf3>:
 9d4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3x>
 9d8:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 9dc:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 9e0:	38 f0       	brcs	.+14     	; 0x9f0 <__mulsf3+0x1c>
 9e2:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 9e6:	20 f0       	brcs	.+8      	; 0x9f0 <__mulsf3+0x1c>
 9e8:	95 23       	and	r25, r21
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <__mulsf3+0x1c>
 9ec:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 9f0:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>
 9f4:	11 24       	eor	r1, r1
 9f6:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>

000009fa <__mulsf3x>:
 9fa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 9fe:	70 f3       	brcs	.-36     	; 0x9dc <__mulsf3+0x8>

00000a00 <__mulsf3_pse>:
 a00:	95 9f       	mul	r25, r21
 a02:	c1 f3       	breq	.-16     	; 0x9f4 <__mulsf3+0x20>
 a04:	95 0f       	add	r25, r21
 a06:	50 e0       	ldi	r21, 0x00	; 0
 a08:	55 1f       	adc	r21, r21
 a0a:	62 9f       	mul	r22, r18
 a0c:	f0 01       	movw	r30, r0
 a0e:	72 9f       	mul	r23, r18
 a10:	bb 27       	eor	r27, r27
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	63 9f       	mul	r22, r19
 a18:	aa 27       	eor	r26, r26
 a1a:	f0 0d       	add	r31, r0
 a1c:	b1 1d       	adc	r27, r1
 a1e:	aa 1f       	adc	r26, r26
 a20:	64 9f       	mul	r22, r20
 a22:	66 27       	eor	r22, r22
 a24:	b0 0d       	add	r27, r0
 a26:	a1 1d       	adc	r26, r1
 a28:	66 1f       	adc	r22, r22
 a2a:	82 9f       	mul	r24, r18
 a2c:	22 27       	eor	r18, r18
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	73 9f       	mul	r23, r19
 a36:	b0 0d       	add	r27, r0
 a38:	a1 1d       	adc	r26, r1
 a3a:	62 1f       	adc	r22, r18
 a3c:	83 9f       	mul	r24, r19
 a3e:	a0 0d       	add	r26, r0
 a40:	61 1d       	adc	r22, r1
 a42:	22 1f       	adc	r18, r18
 a44:	74 9f       	mul	r23, r20
 a46:	33 27       	eor	r19, r19
 a48:	a0 0d       	add	r26, r0
 a4a:	61 1d       	adc	r22, r1
 a4c:	23 1f       	adc	r18, r19
 a4e:	84 9f       	mul	r24, r20
 a50:	60 0d       	add	r22, r0
 a52:	21 1d       	adc	r18, r1
 a54:	82 2f       	mov	r24, r18
 a56:	76 2f       	mov	r23, r22
 a58:	6a 2f       	mov	r22, r26
 a5a:	11 24       	eor	r1, r1
 a5c:	9f 57       	subi	r25, 0x7F	; 127
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	9a f0       	brmi	.+38     	; 0xa88 <__mulsf3_pse+0x88>
 a62:	f1 f0       	breq	.+60     	; 0xaa0 <__mulsf3_pse+0xa0>
 a64:	88 23       	and	r24, r24
 a66:	4a f0       	brmi	.+18     	; 0xa7a <__mulsf3_pse+0x7a>
 a68:	ee 0f       	add	r30, r30
 a6a:	ff 1f       	adc	r31, r31
 a6c:	bb 1f       	adc	r27, r27
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	50 40       	sbci	r21, 0x00	; 0
 a78:	a9 f7       	brne	.-22     	; 0xa64 <__mulsf3_pse+0x64>
 a7a:	9e 3f       	cpi	r25, 0xFE	; 254
 a7c:	51 05       	cpc	r21, r1
 a7e:	80 f0       	brcs	.+32     	; 0xaa0 <__mulsf3_pse+0xa0>
 a80:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 a84:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 a88:	5f 3f       	cpi	r21, 0xFF	; 255
 a8a:	e4 f3       	brlt	.-8      	; 0xa84 <__mulsf3_pse+0x84>
 a8c:	98 3e       	cpi	r25, 0xE8	; 232
 a8e:	d4 f3       	brlt	.-12     	; 0xa84 <__mulsf3_pse+0x84>
 a90:	86 95       	lsr	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b7 95       	ror	r27
 a98:	f7 95       	ror	r31
 a9a:	e7 95       	ror	r30
 a9c:	9f 5f       	subi	r25, 0xFF	; 255
 a9e:	c1 f7       	brne	.-16     	; 0xa90 <__mulsf3_pse+0x90>
 aa0:	fe 2b       	or	r31, r30
 aa2:	88 0f       	add	r24, r24
 aa4:	91 1d       	adc	r25, r1
 aa6:	96 95       	lsr	r25
 aa8:	87 95       	ror	r24
 aaa:	97 f9       	bld	r25, 7
 aac:	08 95       	ret

00000aae <__fp_mpack>:
 aae:	9f 3f       	cpi	r25, 0xFF	; 255
 ab0:	31 f0       	breq	.+12     	; 0xabe <__fp_mpack_finite+0xc>

00000ab2 <__fp_mpack_finite>:
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	20 f4       	brcc	.+8      	; 0xabe <__fp_mpack_finite+0xc>
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	88 0f       	add	r24, r24
 ac0:	91 1d       	adc	r25, r1
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	97 f9       	bld	r25, 7
 ac8:	08 95       	ret

00000aca <__fp_powser>:
 aca:	df 93       	push	r29
 acc:	cf 93       	push	r28
 ace:	1f 93       	push	r17
 ad0:	0f 93       	push	r16
 ad2:	ff 92       	push	r15
 ad4:	ef 92       	push	r14
 ad6:	df 92       	push	r13
 ad8:	7b 01       	movw	r14, r22
 ada:	8c 01       	movw	r16, r24
 adc:	68 94       	set
 ade:	06 c0       	rjmp	.+12     	; 0xaec <__fp_powser+0x22>
 ae0:	da 2e       	mov	r13, r26
 ae2:	ef 01       	movw	r28, r30
 ae4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3x>
 ae8:	fe 01       	movw	r30, r28
 aea:	e8 94       	clt
 aec:	a5 91       	lpm	r26, Z+
 aee:	25 91       	lpm	r18, Z+
 af0:	35 91       	lpm	r19, Z+
 af2:	45 91       	lpm	r20, Z+
 af4:	55 91       	lpm	r21, Z+
 af6:	a6 f3       	brts	.-24     	; 0xae0 <__fp_powser+0x16>
 af8:	ef 01       	movw	r28, r30
 afa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__addsf3x>
 afe:	fe 01       	movw	r30, r28
 b00:	97 01       	movw	r18, r14
 b02:	a8 01       	movw	r20, r16
 b04:	da 94       	dec	r13
 b06:	69 f7       	brne	.-38     	; 0xae2 <__fp_powser+0x18>
 b08:	df 90       	pop	r13
 b0a:	ef 90       	pop	r14
 b0c:	ff 90       	pop	r15
 b0e:	0f 91       	pop	r16
 b10:	1f 91       	pop	r17
 b12:	cf 91       	pop	r28
 b14:	df 91       	pop	r29
 b16:	08 95       	ret

00000b18 <__itoa_ncheck>:
 b18:	bb 27       	eor	r27, r27
 b1a:	4a 30       	cpi	r20, 0x0A	; 10
 b1c:	31 f4       	brne	.+12     	; 0xb2a <__itoa_ncheck+0x12>
 b1e:	99 23       	and	r25, r25
 b20:	22 f4       	brpl	.+8      	; 0xb2a <__itoa_ncheck+0x12>
 b22:	bd e2       	ldi	r27, 0x2D	; 45
 b24:	90 95       	com	r25
 b26:	81 95       	neg	r24
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__utoa_common>

00000b2e <__utoa_ncheck>:
 b2e:	bb 27       	eor	r27, r27

00000b30 <__utoa_common>:
 b30:	fb 01       	movw	r30, r22
 b32:	55 27       	eor	r21, r21
 b34:	aa 27       	eor	r26, r26
 b36:	88 0f       	add	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	aa 1f       	adc	r26, r26
 b3c:	a4 17       	cp	r26, r20
 b3e:	10 f0       	brcs	.+4      	; 0xb44 <__utoa_common+0x14>
 b40:	a4 1b       	sub	r26, r20
 b42:	83 95       	inc	r24
 b44:	50 51       	subi	r21, 0x10	; 16
 b46:	b9 f7       	brne	.-18     	; 0xb36 <__utoa_common+0x6>
 b48:	a0 5d       	subi	r26, 0xD0	; 208
 b4a:	aa 33       	cpi	r26, 0x3A	; 58
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <__utoa_common+0x20>
 b4e:	a9 5d       	subi	r26, 0xD9	; 217
 b50:	a1 93       	st	Z+, r26
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	79 f7       	brne	.-34     	; 0xb34 <__utoa_common+0x4>
 b56:	b1 11       	cpse	r27, r1
 b58:	b1 93       	st	Z+, r27
 b5a:	11 92       	st	Z+, r1
 b5c:	cb 01       	movw	r24, r22
 b5e:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <strrev>

00000b62 <strrev>:
 b62:	dc 01       	movw	r26, r24
 b64:	fc 01       	movw	r30, r24
 b66:	67 2f       	mov	r22, r23
 b68:	71 91       	ld	r23, Z+
 b6a:	77 23       	and	r23, r23
 b6c:	e1 f7       	brne	.-8      	; 0xb66 <strrev+0x4>
 b6e:	32 97       	sbiw	r30, 0x02	; 2
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <strrev+0x18>
 b72:	7c 91       	ld	r23, X
 b74:	6d 93       	st	X+, r22
 b76:	70 83       	st	Z, r23
 b78:	62 91       	ld	r22, -Z
 b7a:	ae 17       	cp	r26, r30
 b7c:	bf 07       	cpc	r27, r31
 b7e:	c8 f3       	brcs	.-14     	; 0xb72 <strrev+0x10>
 b80:	08 95       	ret

00000b82 <_exit>:
 b82:	f8 94       	cli

00000b84 <__stop_program>:
 b84:	ff cf       	rjmp	.-2      	; 0xb84 <__stop_program>
